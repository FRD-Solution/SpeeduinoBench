
speeduinoBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080087c8  080087c8  000097c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008850  08008850  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000000  08008850  08008850  0000a17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008850  08008850  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008858  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000125c  2000017c  080089d4  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  080089d4  0000a3d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b43  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003269  00000000  00000000  0001bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc6  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a2d  00000000  00000000  00020cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c1d  00000000  00000000  00025723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a63  00000000  00000000  0003a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbda3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004500  00000000  00000000  000cbde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d02e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080087b0 	.word	0x080087b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080087b0 	.word	0x080087b0

0800014c <us_delay>:
int _write(int file, char *ptr, int len) {
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
}

void us_delay(uint16_t delay)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000156:	4b0b      	ldr	r3, [pc, #44]	@ (8000184 <us_delay+0x38>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	@ 0x24
	uint16_t counterValue = __HAL_TIM_GET_COUNTER(&htim2);
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <us_delay+0x38>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000164:	81fb      	strh	r3, [r7, #14]
	while(counterValue < delay)
 8000166:	e003      	b.n	8000170 <us_delay+0x24>
	{
		counterValue = __HAL_TIM_GET_COUNTER(&htim2);
 8000168:	4b06      	ldr	r3, [pc, #24]	@ (8000184 <us_delay+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800016e:	81fb      	strh	r3, [r7, #14]
	while(counterValue < delay)
 8000170:	89fa      	ldrh	r2, [r7, #14]
 8000172:	88fb      	ldrh	r3, [r7, #6]
 8000174:	429a      	cmp	r2, r3
 8000176:	d3f7      	bcc.n	8000168 <us_delay+0x1c>
	}
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	200001c8 	.word	0x200001c8

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 fab5 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f86b 	bl	800026c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800019c:	482d      	ldr	r0, [pc, #180]	@ (8000254 <main+0xcc>)
 800019e:	f001 f9f1 	bl	8001584 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a6:	f000 fb0b 	bl	80007c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b0:	4828      	ldr	r0, [pc, #160]	@ (8000254 <main+0xcc>)
 80001b2:	f001 f9e7 	bl	8001584 <HAL_GPIO_WritePin>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b6:	f000 f941 	bl	800043c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001ba:	f000 f8b5 	bl	8000328 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001be:	f007 fe55 	bl	8007e6c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80001c2:	f000 f8ef 	bl	80003a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001c6:	4824      	ldr	r0, [pc, #144]	@ (8000258 <main+0xd0>)
 80001c8:	f000 fbf6 	bl	80009b8 <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim2);
 80001cc:	4823      	ldr	r0, [pc, #140]	@ (800025c <main+0xd4>)
 80001ce:	f003 fd09 	bl	8003be4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t rpmDelay = 1000;
 80001d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d6:	80bb      	strh	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80001d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80001dc:	481e      	ldr	r0, [pc, #120]	@ (8000258 <main+0xd0>)
 80001de:	f000 fc99 	bl	8000b14 <HAL_ADC_PollForConversion>
	  ValPot = HAL_ADC_GetValue(&hadc1);
 80001e2:	481d      	ldr	r0, [pc, #116]	@ (8000258 <main+0xd0>)
 80001e4:	f000 fd9c 	bl	8000d20 <HAL_ADC_GetValue>
 80001e8:	4603      	mov	r3, r0
 80001ea:	b29a      	uxth	r2, r3
 80001ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000260 <main+0xd8>)
 80001ee:	801a      	strh	r2, [r3, #0]
	  rpmDelay = (ValPot / 5) + 90;
 80001f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000260 <main+0xd8>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000264 <main+0xdc>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	335a      	adds	r3, #90	@ 0x5a
 8000200:	80bb      	strh	r3, [r7, #4]
	  //printf("ADC = %d \r\n", ValPot);
	  for(uint8_t i = 0; i<36;i++)
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
 8000206:	e020      	b.n	800024a <main+0xc2>
	  {
		  if(i < 35)
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b22      	cmp	r3, #34	@ 0x22
 800020c:	d814      	bhi.n	8000238 <main+0xb0>
	      {
	      	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000214:	4814      	ldr	r0, [pc, #80]	@ (8000268 <main+0xe0>)
 8000216:	f001 f9b5 	bl	8001584 <HAL_GPIO_WritePin>
	      	us_delay(rpmDelay);
 800021a:	88bb      	ldrh	r3, [r7, #4]
 800021c:	4618      	mov	r0, r3
 800021e:	f7ff ff95 	bl	800014c <us_delay>
	      	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000228:	480f      	ldr	r0, [pc, #60]	@ (8000268 <main+0xe0>)
 800022a:	f001 f9ab 	bl	8001584 <HAL_GPIO_WritePin>
	      	us_delay(rpmDelay);
 800022e:	88bb      	ldrh	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ff8b 	bl	800014c <us_delay>
 8000236:	e005      	b.n	8000244 <main+0xbc>
	      }
	      else
	      {
	    	  us_delay(2 * rpmDelay);
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	b29b      	uxth	r3, r3
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff84 	bl	800014c <us_delay>
	  for(uint8_t i = 0; i<36;i++)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	3301      	adds	r3, #1
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b23      	cmp	r3, #35	@ 0x23
 800024e:	d9db      	bls.n	8000208 <main+0x80>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000250:	e7c2      	b.n	80001d8 <main+0x50>
 8000252:	bf00      	nop
 8000254:	40011000 	.word	0x40011000
 8000258:	20000198 	.word	0x20000198
 800025c:	200001c8 	.word	0x200001c8
 8000260:	20000210 	.word	0x20000210
 8000264:	cccccccd 	.word	0xcccccccd
 8000268:	40010800 	.word	0x40010800

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	@ 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f008 fa6c 	bl	8008758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029c:	2301      	movs	r3, #1
 800029e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fed6 	bl	8003074 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ce:	f000 f923 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 f942 	bl	8003578 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fa:	f000 f90d 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002fe:	2312      	movs	r3, #18
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000302:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000306:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000308:	2300      	movs	r3, #0
 800030a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f003 faac 	bl	800386c <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800031a:	f000 f8fd 	bl	8000518 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	@ 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000338:	4b18      	ldr	r3, [pc, #96]	@ (800039c <MX_ADC1_Init+0x74>)
 800033a:	4a19      	ldr	r2, [pc, #100]	@ (80003a0 <MX_ADC1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033e:	4b17      	ldr	r3, [pc, #92]	@ (800039c <MX_ADC1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <MX_ADC1_Init+0x74>)
 8000346:	2201      	movs	r2, #1
 8000348:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_ADC1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <MX_ADC1_Init+0x74>)
 8000352:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000356:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b10      	ldr	r3, [pc, #64]	@ (800039c <MX_ADC1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800035e:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_ADC1_Init+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000364:	480d      	ldr	r0, [pc, #52]	@ (800039c <MX_ADC1_Init+0x74>)
 8000366:	f000 fa4f 	bl	8000808 <HAL_ADC_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f8d2 	bl	8000518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000374:	2309      	movs	r3, #9
 8000376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_ADC1_Init+0x74>)
 8000386:	f000 fcd7 	bl	8000d38 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000390:	f000 f8c2 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000198 	.word	0x20000198
 80003a0:	40012400 	.word	0x40012400

080003a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	463b      	mov	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003ca:	2247      	movs	r2, #71	@ 0x47
 80003cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 80003d4:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003dc:	4b16      	ldr	r3, [pc, #88]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003e8:	4813      	ldr	r0, [pc, #76]	@ (8000438 <MX_TIM2_Init+0x94>)
 80003ea:	f003 fbab 	bl	8003b44 <HAL_TIM_Base_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003f4:	f000 f890 	bl	8000518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4619      	mov	r1, r3
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <MX_TIM2_Init+0x94>)
 8000406:	f003 fc37 	bl	8003c78 <HAL_TIM_ConfigClockSource>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000410:	f000 f882 	bl	8000518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_TIM2_Init+0x94>)
 8000422:	f003 fdf5 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800042c:	f000 f874 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200001c8 	.word	0x200001c8

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000450:	4b2e      	ldr	r3, [pc, #184]	@ (800050c <MX_GPIO_Init+0xd0>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a2d      	ldr	r2, [pc, #180]	@ (800050c <MX_GPIO_Init+0xd0>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b2b      	ldr	r3, [pc, #172]	@ (800050c <MX_GPIO_Init+0xd0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0310 	and.w	r3, r3, #16
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000468:	4b28      	ldr	r3, [pc, #160]	@ (800050c <MX_GPIO_Init+0xd0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a27      	ldr	r2, [pc, #156]	@ (800050c <MX_GPIO_Init+0xd0>)
 800046e:	f043 0320 	orr.w	r3, r3, #32
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b25      	ldr	r3, [pc, #148]	@ (800050c <MX_GPIO_Init+0xd0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0320 	and.w	r3, r3, #32
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000480:	4b22      	ldr	r3, [pc, #136]	@ (800050c <MX_GPIO_Init+0xd0>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a21      	ldr	r2, [pc, #132]	@ (800050c <MX_GPIO_Init+0xd0>)
 8000486:	f043 0308 	orr.w	r3, r3, #8
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <MX_GPIO_Init+0xd0>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0308 	and.w	r3, r3, #8
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <MX_GPIO_Init+0xd0>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <MX_GPIO_Init+0xd0>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <MX_GPIO_Init+0xd0>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BoardLED_GPIO_Port, BoardLED_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b6:	4816      	ldr	r0, [pc, #88]	@ (8000510 <MX_GPIO_Init+0xd4>)
 80004b8:	f001 f864 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80004c2:	4814      	ldr	r0, [pc, #80]	@ (8000514 <MX_GPIO_Init+0xd8>)
 80004c4:	f001 f85e 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BoardLED_Pin */
  GPIO_InitStruct.Pin = BoardLED_Pin;
 80004c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BoardLED_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	480b      	ldr	r0, [pc, #44]	@ (8000510 <MX_GPIO_Init+0xd4>)
 80004e2:	f000 fecb 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80004e6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_GPIO_Init+0xd8>)
 8000500:	f000 febc 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40011000 	.word	0x40011000
 8000514:	40010800 	.word	0x40010800

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a14      	ldr	r2, [pc, #80]	@ (80005f4 <HAL_ADC_MspInit+0x6c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d121      	bne.n	80005ec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <HAL_ADC_MspInit+0x70>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a12      	ldr	r2, [pc, #72]	@ (80005f8 <HAL_ADC_MspInit+0x70>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <HAL_ADC_MspInit+0x70>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <HAL_ADC_MspInit+0x70>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a0c      	ldr	r2, [pc, #48]	@ (80005f8 <HAL_ADC_MspInit+0x70>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_ADC_MspInit+0x70>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PotPin_Pin;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005dc:	2303      	movs	r3, #3
 80005de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PotPin_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <HAL_ADC_MspInit+0x74>)
 80005e8:	f000 fe48 	bl	800127c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40012400 	.word	0x40012400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010c00 	.word	0x40010c00

08000600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000610:	d10b      	bne.n	800062a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <HAL_TIM_Base_MspInit+0x34>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <HAL_TIM_Base_MspInit+0x34>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <HAL_TIM_Base_MspInit+0x34>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <MemManage_Handler+0x4>

08000650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <UsageFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 f87e 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000696:	f001 f8a9 	bl	80017ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000ee0 	.word	0x20000ee0

080006a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff fff8 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b6:	490c      	ldr	r1, [pc, #48]	@ (80006e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006cc:	4c09      	ldr	r4, [pc, #36]	@ (80006f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f008 f845 	bl	8008768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fd53 	bl	8000188 <main>
  bx lr
 80006e2:	4770      	bx	lr
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80006ec:	08008858 	.word	0x08008858
  ldr r2, =_sbss
 80006f0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80006f4:	200013d8 	.word	0x200013d8

080006f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_2_IRQHandler>
	...

080006fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <HAL_Init+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	@ (8000724 <HAL_Init+0x28>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 fd73 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000712:	200f      	movs	r0, #15
 8000714:	f000 f808 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000718:	f7ff ff04 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_InitTick+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_InitTick+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fd8b 	bl	8001262 <HAL_SYSTICK_Config>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00e      	b.n	8000774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d80a      	bhi.n	8000772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 fd53 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4a06      	ldr	r2, [pc, #24]	@ (8000784 <HAL_InitTick+0x5c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a03      	ldr	r2, [pc, #12]	@ (80007a8 <HAL_IncTick+0x20>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000214 	.word	0x20000214

080007ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000214 	.word	0x20000214

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff fff0 	bl	80007ac <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d005      	beq.n	80007e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <HAL_Delay+0x44>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e6:	bf00      	nop
 80007e8:	f7ff ffe0 	bl	80007ac <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8f7      	bhi.n	80007e8 <HAL_Delay+0x28>
  {
  }
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008

08000808 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e0be      	b.n	80009a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000834:	2b00      	cmp	r3, #0
 8000836:	d109      	bne.n	800084c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe9e 	bl	8000588 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fbc5 	bl	8000fdc <ADC_ConversionStop_Disable>
 8000852:	4603      	mov	r3, r0
 8000854:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	2b00      	cmp	r3, #0
 8000860:	f040 8099 	bne.w	8000996 <HAL_ADC_Init+0x18e>
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f040 8095 	bne.w	8000996 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000870:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000874:	f023 0302 	bic.w	r3, r3, #2
 8000878:	f043 0202 	orr.w	r2, r3, #2
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000888:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7b1b      	ldrb	r3, [r3, #12]
 800088e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000890:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	4313      	orrs	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008a0:	d003      	beq.n	80008aa <HAL_ADC_Init+0xa2>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d102      	bne.n	80008b0 <HAL_ADC_Init+0xa8>
 80008aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ae:	e000      	b.n	80008b2 <HAL_ADC_Init+0xaa>
 80008b0:	2300      	movs	r3, #0
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7d1b      	ldrb	r3, [r3, #20]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d119      	bne.n	80008f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d109      	bne.n	80008dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	035a      	lsls	r2, r3, #13
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	e00b      	b.n	80008f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008e0:	f043 0220 	orr.w	r2, r3, #32
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ec:	f043 0201 	orr.w	r2, r3, #1
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	430a      	orrs	r2, r1
 8000906:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <HAL_ADC_Init+0x1a8>)
 8000910:	4013      	ands	r3, r2
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	430b      	orrs	r3, r1
 800091a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000924:	d003      	beq.n	800092e <HAL_ADC_Init+0x126>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	3b01      	subs	r3, #1
 8000934:	051b      	lsls	r3, r3, #20
 8000936:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	430a      	orrs	r2, r1
 800094a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_ADC_Init+0x1ac>)
 8000954:	4013      	ands	r3, r2
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	429a      	cmp	r2, r3
 800095a:	d10b      	bne.n	8000974 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000966:	f023 0303 	bic.w	r3, r3, #3
 800096a:	f043 0201 	orr.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000972:	e018      	b.n	80009a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000978:	f023 0312 	bic.w	r3, r3, #18
 800097c:	f043 0210 	orr.w	r2, r3, #16
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000988:	f043 0201 	orr.w	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000994:	e007      	b.n	80009a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800099a:	f043 0210 	orr.w	r2, r3, #16
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	ffe1f7fd 	.word	0xffe1f7fd
 80009b4:	ff1f0efe 	.word	0xff1f0efe

080009b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d101      	bne.n	80009d2 <HAL_ADC_Start+0x1a>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e098      	b.n	8000b04 <HAL_ADC_Start+0x14c>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 faa4 	bl	8000f28 <ADC_Enable>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8087 	bne.w	8000afa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a41      	ldr	r2, [pc, #260]	@ (8000b0c <HAL_ADC_Start+0x154>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d105      	bne.n	8000a16 <HAL_ADC_Start+0x5e>
 8000a0a:	4b41      	ldr	r3, [pc, #260]	@ (8000b10 <HAL_ADC_Start+0x158>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d115      	bne.n	8000a42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d026      	beq.n	8000a7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a40:	e01d      	b.n	8000a7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a2f      	ldr	r2, [pc, #188]	@ (8000b10 <HAL_ADC_Start+0x158>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d004      	beq.n	8000a62 <HAL_ADC_Start+0xaa>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b0c <HAL_ADC_Start+0x154>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10d      	bne.n	8000a7e <HAL_ADC_Start+0xc6>
 8000a62:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <HAL_ADC_Start+0x158>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d007      	beq.n	8000a7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	f023 0206 	bic.w	r2, r3, #6
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a96:	e002      	b.n	8000a9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f06f 0202 	mvn.w	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000aba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000abe:	d113      	bne.n	8000ae8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ac4:	4a11      	ldr	r2, [pc, #68]	@ (8000b0c <HAL_ADC_Start+0x154>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d105      	bne.n	8000ad6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_ADC_Start+0x158>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d108      	bne.n	8000ae8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	e00c      	b.n	8000b02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	e003      	b.n	8000b02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40012800 	.word	0x40012800
 8000b10:	40012400 	.word	0x40012400

08000b14 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b2a:	f7ff fe3f 	bl	80007ac <HAL_GetTick>
 8000b2e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b42:	f043 0220 	orr.w	r2, r3, #32
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0d3      	b.n	8000cfe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d131      	bne.n	8000bc8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d12a      	bne.n	8000bc8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b72:	e021      	b.n	8000bb8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7a:	d01d      	beq.n	8000bb8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <HAL_ADC_PollForConversion+0x7e>
 8000b82:	f7ff fe13 	bl	80007ac <HAL_GetTick>
 8000b86:	4602      	mov	r2, r0
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d212      	bcs.n	8000bb8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba4:	f043 0204 	orr.w	r2, r3, #4
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e0a2      	b.n	8000cfe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0d6      	beq.n	8000b74 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bc6:	e070      	b.n	8000caa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d08 <HAL_ADC_PollForConversion+0x1f4>)
 8000bca:	681c      	ldr	r4, [r3, #0]
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f002 ff03 	bl	80039d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6919      	ldr	r1, [r3, #16]
 8000bde:	4b4b      	ldr	r3, [pc, #300]	@ (8000d0c <HAL_ADC_PollForConversion+0x1f8>)
 8000be0:	400b      	ands	r3, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d118      	bne.n	8000c18 <HAL_ADC_PollForConversion+0x104>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68d9      	ldr	r1, [r3, #12]
 8000bec:	4b48      	ldr	r3, [pc, #288]	@ (8000d10 <HAL_ADC_PollForConversion+0x1fc>)
 8000bee:	400b      	ands	r3, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d111      	bne.n	8000c18 <HAL_ADC_PollForConversion+0x104>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6919      	ldr	r1, [r3, #16]
 8000bfa:	4b46      	ldr	r3, [pc, #280]	@ (8000d14 <HAL_ADC_PollForConversion+0x200>)
 8000bfc:	400b      	ands	r3, r1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d108      	bne.n	8000c14 <HAL_ADC_PollForConversion+0x100>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68d9      	ldr	r1, [r3, #12]
 8000c08:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <HAL_ADC_PollForConversion+0x204>)
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <HAL_ADC_PollForConversion+0x100>
 8000c10:	2314      	movs	r3, #20
 8000c12:	e020      	b.n	8000c56 <HAL_ADC_PollForConversion+0x142>
 8000c14:	2329      	movs	r3, #41	@ 0x29
 8000c16:	e01e      	b.n	8000c56 <HAL_ADC_PollForConversion+0x142>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6919      	ldr	r1, [r3, #16]
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d14 <HAL_ADC_PollForConversion+0x200>)
 8000c20:	400b      	ands	r3, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d106      	bne.n	8000c34 <HAL_ADC_PollForConversion+0x120>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68d9      	ldr	r1, [r3, #12]
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d18 <HAL_ADC_PollForConversion+0x204>)
 8000c2e:	400b      	ands	r3, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00d      	beq.n	8000c50 <HAL_ADC_PollForConversion+0x13c>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6919      	ldr	r1, [r3, #16]
 8000c3a:	4b38      	ldr	r3, [pc, #224]	@ (8000d1c <HAL_ADC_PollForConversion+0x208>)
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d108      	bne.n	8000c54 <HAL_ADC_PollForConversion+0x140>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68d9      	ldr	r1, [r3, #12]
 8000c48:	4b34      	ldr	r3, [pc, #208]	@ (8000d1c <HAL_ADC_PollForConversion+0x208>)
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_PollForConversion+0x140>
 8000c50:	2354      	movs	r3, #84	@ 0x54
 8000c52:	e000      	b.n	8000c56 <HAL_ADC_PollForConversion+0x142>
 8000c54:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c5c:	e021      	b.n	8000ca2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d01a      	beq.n	8000c9c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d007      	beq.n	8000c7c <HAL_ADC_PollForConversion+0x168>
 8000c6c:	f7ff fd9e 	bl	80007ac <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d20f      	bcs.n	8000c9c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d90b      	bls.n	8000c9c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c88:	f043 0204 	orr.w	r2, r3, #4
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e030      	b.n	8000cfe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d8d9      	bhi.n	8000c5e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f06f 0212 	mvn.w	r2, #18
 8000cb2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000cca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cce:	d115      	bne.n	8000cfc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d111      	bne.n	8000cfc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf4:	f043 0201 	orr.w	r2, r3, #1
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	24924924 	.word	0x24924924
 8000d10:	00924924 	.word	0x00924924
 8000d14:	12492492 	.word	0x12492492
 8000d18:	00492492 	.word	0x00492492
 8000d1c:	00249249 	.word	0x00249249

08000d20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x20>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e0dc      	b.n	8000f12 <HAL_ADC_ConfigChannel+0x1da>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d81c      	bhi.n	8000da2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	3b05      	subs	r3, #5
 8000d7a:	221f      	movs	r2, #31
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4019      	ands	r1, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	3b05      	subs	r3, #5
 8000d94:	fa00 f203 	lsl.w	r2, r0, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000da0:	e03c      	b.n	8000e1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b0c      	cmp	r3, #12
 8000da8:	d81c      	bhi.n	8000de4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	3b23      	subs	r3, #35	@ 0x23
 8000dbc:	221f      	movs	r2, #31
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4019      	ands	r1, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b23      	subs	r3, #35	@ 0x23
 8000dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000de2:	e01b      	b.n	8000e1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3b41      	subs	r3, #65	@ 0x41
 8000df6:	221f      	movs	r2, #31
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4019      	ands	r1, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b41      	subs	r3, #65	@ 0x41
 8000e10:	fa00 f203 	lsl.w	r2, r0, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b09      	cmp	r3, #9
 8000e22:	d91c      	bls.n	8000e5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68d9      	ldr	r1, [r3, #12]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	3b1e      	subs	r3, #30
 8000e36:	2207      	movs	r2, #7
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4019      	ands	r1, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6898      	ldr	r0, [r3, #8]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b1e      	subs	r3, #30
 8000e50:	fa00 f203 	lsl.w	r2, r0, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	e019      	b.n	8000e92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6919      	ldr	r1, [r3, #16]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	2207      	movs	r2, #7
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4019      	ands	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6898      	ldr	r0, [r3, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	d003      	beq.n	8000ea2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e9e:	2b11      	cmp	r3, #17
 8000ea0:	d132      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f1c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d125      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d126      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ec8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d11a      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a13      	ldr	r2, [pc, #76]	@ (8000f24 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	0c9a      	lsrs	r2, r3, #18
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ee8:	e002      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f9      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x1b2>
 8000ef6:	e007      	b.n	8000f08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	f043 0220 	orr.w	r2, r3, #32
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40012400 	.word	0x40012400
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83

08000f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d040      	beq.n	8000fc8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0201 	orr.w	r2, r2, #1
 8000f54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <ADC_Enable+0xac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd8 <ADC_Enable+0xb0>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9b      	lsrs	r3, r3, #18
 8000f62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f64:	e002      	b.n	8000f6c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f9      	bne.n	8000f66 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f72:	f7ff fc1b 	bl	80007ac <HAL_GetTick>
 8000f76:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f78:	e01f      	b.n	8000fba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f7a:	f7ff fc17 	bl	80007ac <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d918      	bls.n	8000fba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d011      	beq.n	8000fba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9a:	f043 0210 	orr.w	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa6:	f043 0201 	orr.w	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e007      	b.n	8000fca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1d8      	bne.n	8000f7a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	431bde83 	.word	0x431bde83

08000fdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d12e      	bne.n	8001054 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001006:	f7ff fbd1 	bl	80007ac <HAL_GetTick>
 800100a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800100c:	e01b      	b.n	8001046 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800100e:	f7ff fbcd 	bl	80007ac <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d914      	bls.n	8001046 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10d      	bne.n	8001046 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102e:	f043 0210 	orr.w	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e007      	b.n	8001056 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b01      	cmp	r3, #1
 8001052:	d0dc      	beq.n	800100e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4906      	ldr	r1, [pc, #24]	@ (80010f8 <__NVIC_EnableIRQ+0x34>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff90 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff2d 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff42 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff90 	bl	8001150 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5f 	bl	80010fc <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff35 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b08b      	sub	sp, #44	@ 0x2c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e169      	b.n	8001564 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001290:	2201      	movs	r2, #1
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8158 	bne.w	800155e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a9a      	ldr	r2, [pc, #616]	@ (800151c <HAL_GPIO_Init+0x2a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d05e      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012b8:	4a98      	ldr	r2, [pc, #608]	@ (800151c <HAL_GPIO_Init+0x2a0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d875      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012be:	4a98      	ldr	r2, [pc, #608]	@ (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d058      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012c4:	4a96      	ldr	r2, [pc, #600]	@ (8001520 <HAL_GPIO_Init+0x2a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d86f      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ca:	4a96      	ldr	r2, [pc, #600]	@ (8001524 <HAL_GPIO_Init+0x2a8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d052      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012d0:	4a94      	ldr	r2, [pc, #592]	@ (8001524 <HAL_GPIO_Init+0x2a8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d869      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012d6:	4a94      	ldr	r2, [pc, #592]	@ (8001528 <HAL_GPIO_Init+0x2ac>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d04c      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012dc:	4a92      	ldr	r2, [pc, #584]	@ (8001528 <HAL_GPIO_Init+0x2ac>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d863      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012e2:	4a92      	ldr	r2, [pc, #584]	@ (800152c <HAL_GPIO_Init+0x2b0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d046      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
 80012e8:	4a90      	ldr	r2, [pc, #576]	@ (800152c <HAL_GPIO_Init+0x2b0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d85d      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d82a      	bhi.n	8001348 <HAL_GPIO_Init+0xcc>
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d859      	bhi.n	80013aa <HAL_GPIO_Init+0x12e>
 80012f6:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <HAL_GPIO_Init+0x80>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001377 	.word	0x08001377
 8001300:	08001351 	.word	0x08001351
 8001304:	08001363 	.word	0x08001363
 8001308:	080013a5 	.word	0x080013a5
 800130c:	080013ab 	.word	0x080013ab
 8001310:	080013ab 	.word	0x080013ab
 8001314:	080013ab 	.word	0x080013ab
 8001318:	080013ab 	.word	0x080013ab
 800131c:	080013ab 	.word	0x080013ab
 8001320:	080013ab 	.word	0x080013ab
 8001324:	080013ab 	.word	0x080013ab
 8001328:	080013ab 	.word	0x080013ab
 800132c:	080013ab 	.word	0x080013ab
 8001330:	080013ab 	.word	0x080013ab
 8001334:	080013ab 	.word	0x080013ab
 8001338:	080013ab 	.word	0x080013ab
 800133c:	080013ab 	.word	0x080013ab
 8001340:	08001359 	.word	0x08001359
 8001344:	0800136d 	.word	0x0800136d
 8001348:	4a79      	ldr	r2, [pc, #484]	@ (8001530 <HAL_GPIO_Init+0x2b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134e:	e02c      	b.n	80013aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e029      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e024      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3308      	adds	r3, #8
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e01f      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e01a      	b.n	80013ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137e:	2304      	movs	r3, #4
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e013      	b.n	80013ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	611a      	str	r2, [r3, #16]
          break;
 8001396:	e009      	b.n	80013ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	615a      	str	r2, [r3, #20]
          break;
 80013a2:	e003      	b.n	80013ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
          break;
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x130>
          break;
 80013aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	@ 0xff
 80013b0:	d801      	bhi.n	80013b6 <HAL_GPIO_Init+0x13a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_Init+0x13e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	@ 0xff
 80013c0:	d802      	bhi.n	80013c8 <HAL_GPIO_Init+0x14c>
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x152>
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	3b08      	subs	r3, #8
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	210f      	movs	r1, #15
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80b1 	beq.w	800155e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a4c      	ldr	r2, [pc, #304]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001414:	4a48      	ldr	r2, [pc, #288]	@ (8001538 <HAL_GPIO_Init+0x2bc>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a40      	ldr	r2, [pc, #256]	@ (800153c <HAL_GPIO_Init+0x2c0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1ec>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3f      	ldr	r2, [pc, #252]	@ (8001540 <HAL_GPIO_Init+0x2c4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1e8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3e      	ldr	r2, [pc, #248]	@ (8001544 <HAL_GPIO_Init+0x2c8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3d      	ldr	r2, [pc, #244]	@ (8001548 <HAL_GPIO_Init+0x2cc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1e0>
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 800145c:	2304      	movs	r3, #4
 800145e:	e004      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001460:	2302      	movs	r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x1ee>
 8001468:	2300      	movs	r3, #0
 800146a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4093      	lsls	r3, r2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800147a:	492f      	ldr	r1, [pc, #188]	@ (8001538 <HAL_GPIO_Init+0x2bc>)
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001494:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	492c      	ldr	r1, [pc, #176]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4928      	ldr	r1, [pc, #160]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b23      	ldr	r3, [pc, #140]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4922      	ldr	r1, [pc, #136]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	491e      	ldr	r1, [pc, #120]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4918      	ldr	r1, [pc, #96]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f2:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4914      	ldr	r1, [pc, #80]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d021      	beq.n	8001550 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	490e      	ldr	r1, [pc, #56]	@ (800154c <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e021      	b.n	800155e <HAL_GPIO_Init+0x2e2>
 800151a:	bf00      	nop
 800151c:	10320000 	.word	0x10320000
 8001520:	10310000 	.word	0x10310000
 8001524:	10220000 	.word	0x10220000
 8001528:	10210000 	.word	0x10210000
 800152c:	10120000 	.word	0x10120000
 8001530:	10110000 	.word	0x10110000
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40011000 	.word	0x40011000
 8001548:	40011400 	.word	0x40011400
 800154c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_GPIO_Init+0x304>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	43db      	mvns	r3, r3
 8001558:	4909      	ldr	r1, [pc, #36]	@ (8001580 <HAL_GPIO_Init+0x304>)
 800155a:	4013      	ands	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	3301      	adds	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f ae8e 	bne.w	8001290 <HAL_GPIO_Init+0x14>
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	372c      	adds	r7, #44	@ 0x2c
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0e8      	b.n	8001798 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f006 fe12 	bl	8008204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2203      	movs	r2, #3
 80015e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fd8d 	bl	8004112 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001602:	f002 fd63 	bl	80040cc <USB_CoreInit>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0bf      	b.n	8001798 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fd91 	bl	8004146 <USB_SetCurrentMode>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2202      	movs	r2, #2
 800162e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0b0      	b.n	8001798 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e03e      	b.n	80016ba <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	3311      	adds	r3, #17
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3310      	adds	r3, #16
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3313      	adds	r3, #19
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	3320      	adds	r3, #32
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3324      	adds	r3, #36	@ 0x24
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	791b      	ldrb	r3, [r3, #4]
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3bb      	bcc.n	800163c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e044      	b.n	8001754 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3301      	adds	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	791b      	ldrb	r3, [r3, #4]
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	429a      	cmp	r2, r3
 800175c:	d3b5      	bcc.n	80016ca <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001768:	f002 fcf9 	bl	800415e <USB_DevInit>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2202      	movs	r2, #2
 8001776:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00c      	b.n	8001798 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 ff78 	bl	8006686 <USB_DevDisconnect>

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_PCD_Start+0x16>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e016      	b.n	80017e4 <HAL_PCD_Start+0x44>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fc8f 	bl	80040e6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017c8:	2101      	movs	r1, #1
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f006 ff8d 	bl	80086ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 ff4c 	bl	8006672 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 ff4e 	bl	800669a <USB_ReadInterrupts>
 80017fe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fb1a 	bl	8001e44 <PCD_EP_ISR_Handler>

    return;
 8001810:	e119      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800182e:	b292      	uxth	r2, r2
 8001830:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f006 fd60 	bl	80082fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800183a:	2100      	movs	r1, #0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f905 	bl	8001a4c <HAL_PCD_SetAddress>

    return;
 8001842:	e100      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001856:	b29a      	uxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001860:	b292      	uxth	r2, r2
 8001862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001866:	e0ee      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001884:	b292      	uxth	r2, r2
 8001886:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800188a:	e0dc      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d027      	beq.n	80018e6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800189e:	b29a      	uxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0204 	bic.w	r2, r2, #4
 80018a8:	b292      	uxth	r2, r2
 80018aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0208 	bic.w	r2, r2, #8
 80018c0:	b292      	uxth	r2, r2
 80018c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f006 fd50 	bl	800836c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018e4:	e0af      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8083 	beq.w	80019f8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	77fb      	strb	r3, [r7, #31]
 80018f6:	e010      	b.n	800191a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	441a      	add	r2, r3
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	8812      	ldrh	r2, [r2, #0]
 8001908:	b292      	uxth	r2, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	3320      	adds	r3, #32
 800190e:	443b      	add	r3, r7
 8001910:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001914:	7ffb      	ldrb	r3, [r7, #31]
 8001916:	3301      	adds	r3, #1
 8001918:	77fb      	strb	r3, [r7, #31]
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	2b07      	cmp	r3, #7
 800191e:	d9eb      	bls.n	80018f8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	b292      	uxth	r2, r2
 8001934:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001950:	bf00      	nop
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800195a:	b29b      	uxth	r3, r3
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f6      	beq.n	8001952 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001976:	b292      	uxth	r2, r2
 8001978:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
 8001980:	e00f      	b.n	80019a2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001982:	7ffb      	ldrb	r3, [r7, #31]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4611      	mov	r1, r2
 800198a:	7ffa      	ldrb	r2, [r7, #31]
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	440a      	add	r2, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	3320      	adds	r3, #32
 8001994:	443b      	add	r3, r7
 8001996:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800199a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	3301      	adds	r3, #1
 80019a0:	77fb      	strb	r3, [r7, #31]
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	2b07      	cmp	r3, #7
 80019a6:	d9ec      	bls.n	8001982 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0208 	orr.w	r2, r2, #8
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019d2:	b292      	uxth	r2, r2
 80019d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0204 	orr.w	r2, r2, #4
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f006 fca1 	bl	8008338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019f6:	e026      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00f      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f006 fc5f 	bl	80082de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a20:	e011      	b.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a44:	bf00      	nop
  }
}
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_SetAddress+0x1a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e012      	b.n	8001a8c <HAL_PCD_SetAddress+0x40>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fde5 	bl	800664c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	803b      	strh	r3, [r7, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0e      	bge.n	8001ad8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 0207 	and.w	r2, r3, #7
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	3310      	adds	r3, #16
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 0207 	and.w	r2, r3, #7
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b02:	883a      	ldrh	r2, [r7, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	78ba      	ldrb	r2, [r7, #2]
 8001b0c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b0e:	78bb      	ldrb	r3, [r7, #2]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d102      	bne.n	8001b1a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_PCD_EP_Open+0x94>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e00e      	b.n	8001b46 <HAL_PCD_EP_Open+0xb2>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fb2e 	bl	8004198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001b44:	7afb      	ldrb	r3, [r7, #11]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da0e      	bge.n	8001b80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0207 	and.w	r2, r3, #7
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	3310      	adds	r3, #16
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
 8001b7e:	e00e      	b.n	8001b9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 0207 	and.w	r2, r3, #7
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_EP_Close+0x6a>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e00e      	b.n	8001bd6 <HAL_PCD_EP_Close+0x88>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fea6 	bl	8004918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	460b      	mov	r3, r1
 8001bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	f003 0207 	and.w	r2, r3, #7
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 f85d 	bl	8004cf0 <USB_EPStartXfer>

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 0207 	and.w	r2, r3, #7
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 0207 	and.w	r2, r3, #7
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 f80f 	bl	8004cf0 <USB_EPStartXfer>

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	7912      	ldrb	r2, [r2, #4]
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e04c      	b.n	8001d94 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da0e      	bge.n	8001d20 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0207 	and.w	r2, r3, #7
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	3310      	adds	r3, #16
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00c      	b.n	8001d3a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_PCD_EP_SetStall+0x7e>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e01c      	b.n	8001d94 <HAL_PCD_EP_SetStall+0xb8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fb72 	bl	8006452 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f004 fc97 	bl	80066b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	7912      	ldrb	r2, [r2, #4]
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e040      	b.n	8001e3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da0e      	bge.n	8001de0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 0207 	and.w	r2, r3, #7
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	3310      	adds	r3, #16
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	705a      	strb	r2, [r3, #1]
 8001dde:	e00e      	b.n	8001dfe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0207 	and.w	r2, r3, #7
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_PCD_EP_ClrStall+0x82>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e00e      	b.n	8001e3c <HAL_PCD_EP_ClrStall+0xa0>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68f9      	ldr	r1, [r7, #12]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 fb60 	bl	80064f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e4c:	e3bb      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001e68:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 8175 	bne.w	800215c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d14e      	bne.n	8001f1c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8e:	81fb      	strh	r3, [r7, #14]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	441a      	add	r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f006 f9e0 	bl	80082aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7b5b      	ldrb	r3, [r3, #13]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8368 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x782>
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8363 	bne.w	80025c6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7b5b      	ldrb	r3, [r3, #13]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	735a      	strb	r2, [r3, #13]
 8001f1a:	e354      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f22:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d034      	beq.n	8001fa4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3306      	adds	r3, #6
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f004 fbed 	bl	8006758 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	823b      	strh	r3, [r7, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	8a3a      	ldrh	r2, [r7, #16]
 8001f94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f006 f957 	bl	8008250 <HAL_PCD_SetupStageCallback>
 8001fa2:	e310      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fa4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f280 830c 	bge.w	80025c6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001fba:	4013      	ands	r3, r2
 8001fbc:	83fb      	strh	r3, [r7, #30]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	8bfa      	ldrh	r2, [r7, #30]
 8001fc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3306      	adds	r3, #6
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <PCD_EP_ISR_Handler+0x1f0>
 8002000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200e:	6959      	ldr	r1, [r3, #20]
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002018:	b29b      	uxth	r3, r3
 800201a:	f004 fb9d 	bl	8006758 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800201e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	441a      	add	r2, r3
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800202c:	2100      	movs	r1, #0
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f006 f920 	bl	8008274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800203e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 82bd 	bne.w	80025c6 <PCD_EP_ISR_Handler+0x782>
 800204c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002050:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002054:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002058:	f000 82b5 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4413      	add	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002086:	b29a      	uxth	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b3e      	cmp	r3, #62	@ 0x3e
 8002092:	d91d      	bls.n	80020d0 <PCD_EP_ISR_Handler+0x28c>
 8002094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	647b      	str	r3, [r7, #68]	@ 0x44
 800209c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <PCD_EP_ISR_Handler+0x26a>
 80020a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020aa:	3b01      	subs	r3, #1
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	e026      	b.n	800211e <PCD_EP_ISR_Handler+0x2da>
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <PCD_EP_ISR_Handler+0x2aa>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	801a      	strh	r2, [r3, #0]
 80020ec:	e017      	b.n	800211e <PCD_EP_ISR_Handler+0x2da>
 80020ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <PCD_EP_ISR_Handler+0x2c4>
 8002102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002104:	3301      	adds	r3, #1
 8002106:	647b      	str	r3, [r7, #68]	@ 0x44
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29a      	uxth	r2, r3
 800210e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002110:	b29b      	uxth	r3, r3
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	b29b      	uxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b29a      	uxth	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800212a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800212e:	827b      	strh	r3, [r7, #18]
 8002130:	8a7b      	ldrh	r3, [r7, #18]
 8002132:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002136:	827b      	strh	r3, [r7, #18]
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800213e:	827b      	strh	r3, [r7, #18]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	8a7b      	ldrh	r3, [r7, #18]
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
 800215a:	e234      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002170:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002174:	2b00      	cmp	r3, #0
 8002176:	f280 80fc 	bge.w	8002372 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002190:	4013      	ands	r3, r2
 8002192:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80021a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021ac:	b292      	uxth	r2, r2
 80021ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021b0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d125      	bne.n	800221a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	3306      	adds	r3, #6
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80021fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8092 	beq.w	8002328 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220a:	6959      	ldr	r1, [r3, #20]
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	88da      	ldrh	r2, [r3, #6]
 8002210:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002214:	f004 faa0 	bl	8006758 <USB_ReadPMA>
 8002218:	e086      	b.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d10a      	bne.n	8002238 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002226:	461a      	mov	r2, r3
 8002228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f9d9 	bl	80025e2 <HAL_PCD_EP_DB_Receive>
 8002230:	4603      	mov	r3, r0
 8002232:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002236:	e077      	b.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800226c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002274:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002278:	b29b      	uxth	r3, r3
 800227a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d024      	beq.n	80022e0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	3302      	adds	r3, #2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80022c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02e      	beq.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d4:	891a      	ldrh	r2, [r3, #8]
 80022d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022da:	f004 fa3d 	bl	8006758 <USB_ReadPMA>
 80022de:	e023      	b.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	3306      	adds	r3, #6
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002308:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800230c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231a:	6959      	ldr	r1, [r3, #20]
 800231c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800231e:	895a      	ldrh	r2, [r3, #10]
 8002320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002324:	f004 fa18 	bl	8006758 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002330:	441a      	add	r2, r3
 8002332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002334:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800233e:	441a      	add	r2, r3
 8002340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002342:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <PCD_EP_ISR_Handler+0x514>
 800234c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d206      	bcs.n	8002366 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f005 ff88 	bl	8008274 <HAL_PCD_DataOutStageCallback>
 8002364:	e005      	b.n	8002372 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fcbf 	bl	8004cf0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002372:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8123 	beq.w	80025c6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002380:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	3310      	adds	r3, #16
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d2:	78db      	ldrb	r3, [r3, #3]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f040 80a2 	bne.w	800251e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80023da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	7b1b      	ldrb	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8093 	beq.w	8002510 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d046      	beq.n	8002484 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <PCD_EP_ISR_Handler+0x608>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	4413      	add	r3, r2
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	011a      	lsls	r2, r3, #4
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	4413      	add	r3, r2
 8002420:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	b29a      	uxth	r2, r3
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002444:	b29a      	uxth	r2, r3
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e061      	b.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 800244c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d15d      	bne.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	4413      	add	r3, r2
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	011a      	lsls	r2, r3, #4
 8002472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002474:	4413      	add	r3, r2
 8002476:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e045      	b.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800248a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d126      	bne.n	80024e0 <PCD_EP_ISR_Handler+0x69c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a6:	4413      	add	r3, r2
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	011a      	lsls	r2, r3, #4
 80024b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b2:	4413      	add	r3, r2
 80024b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e017      	b.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 80024e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d113      	bne.n	8002510 <PCD_EP_ISR_Handler+0x6cc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f6:	4413      	add	r3, r2
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	011a      	lsls	r2, r3, #4
 8002500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002502:	4413      	add	r3, r2
 8002504:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800250a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250c:	2200      	movs	r2, #0
 800250e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f005 fec7 	bl	80082aa <HAL_PCD_DataInStageCallback>
 800251c:	e053      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800251e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d146      	bne.n	80025b8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	3302      	adds	r3, #2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002552:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800255e:	429a      	cmp	r2, r3
 8002560:	d907      	bls.n	8002572 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800256a:	1ad2      	subs	r2, r2, r3
 800256c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256e:	619a      	str	r2, [r3, #24]
 8002570:	e002      	b.n	8002578 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f005 fe8f 	bl	80082aa <HAL_PCD_DataInStageCallback>
 800258c:	e01b      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800258e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002596:	441a      	add	r2, r3
 8002598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025a4:	441a      	add	r2, r3
 80025a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fb9d 	bl	8004cf0 <USB_EPStartXfer>
 80025b6:	e006      	b.n	80025c6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025bc:	461a      	mov	r2, r3
 80025be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f91b 	bl	80027fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f6ff ac3b 	blt.w	8001e4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3758      	adds	r7, #88	@ 0x58
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b088      	sub	sp, #32
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	4613      	mov	r3, r2
 80025ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d07e      	beq.n	80026f8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	3302      	adds	r3, #2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002622:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	8b7b      	ldrh	r3, [r7, #26]
 800262a:	429a      	cmp	r2, r3
 800262c:	d306      	bcc.n	800263c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	1ad2      	subs	r2, r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	e002      	b.n	8002642 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d123      	bne.n	8002692 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002664:	833b      	strh	r3, [r7, #24]
 8002666:	8b3b      	ldrh	r3, [r7, #24]
 8002668:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800266c:	833b      	strh	r3, [r7, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	8b3b      	ldrh	r3, [r7, #24]
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01f      	beq.n	80026dc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b6:	82fb      	strh	r3, [r7, #22]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	8afb      	ldrh	r3, [r7, #22]
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8087 	beq.w	80027f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6959      	ldr	r1, [r3, #20]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	891a      	ldrh	r2, [r3, #8]
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
 80026f2:	f004 f831 	bl	8006758 <USB_ReadPMA>
 80026f6:	e07c      	b.n	80027f2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	3306      	adds	r3, #6
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002720:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	429a      	cmp	r2, r3
 800272a:	d306      	bcc.n	800273a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	619a      	str	r2, [r3, #24]
 8002738:	e002      	b.n	8002740 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d123      	bne.n	8002790 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800275e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002762:	83fb      	strh	r3, [r7, #30]
 8002764:	8bfb      	ldrh	r3, [r7, #30]
 8002766:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800276a:	83fb      	strh	r3, [r7, #30]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	8bfb      	ldrh	r3, [r7, #30]
 800277c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278c:	b29b      	uxth	r3, r3
 800278e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b4:	83bb      	strh	r3, [r7, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8bbb      	ldrh	r3, [r7, #28]
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027da:	8b7b      	ldrh	r3, [r7, #26]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	895a      	ldrh	r2, [r3, #10]
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	f003 ffb3 	bl	8006758 <USB_ReadPMA>
    }
  }

  return count;
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a4      	sub	sp, #144	@ 0x90
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 81dd 	beq.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800281e:	b29b      	uxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	3302      	adds	r3, #2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800284a:	429a      	cmp	r2, r3
 800284c:	d907      	bls.n	800285e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002856:	1ad2      	subs	r2, r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	619a      	str	r2, [r3, #24]
 800285c:	e002      	b.n	8002864 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 80b9 	bne.w	80029e0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d126      	bne.n	80028c4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	4413      	add	r3, r2
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	4413      	add	r3, r2
 8002898:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028bc:	b29a      	uxth	r2, r3
 80028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e01a      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d116      	bne.n	80028fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e0:	4413      	add	r3, r2
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	011a      	lsls	r2, r3, #4
 80028ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ec:	4413      	add	r3, r2
 80028ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d126      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	011a      	lsls	r2, r3, #4
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293a:	b29a      	uxth	r2, r3
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294e:	b29a      	uxth	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	801a      	strh	r2, [r3, #0]
 8002954:	e017      	b.n	8002986 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d113      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x18a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	4413      	add	r3, r2
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	011a      	lsls	r2, r3, #4
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	4413      	add	r3, r2
 800297a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f005 fc8c 	bl	80082aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 82fc 	beq.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b8:	82fb      	strh	r3, [r7, #22]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	8afb      	ldrh	r3, [r7, #22]
 80029ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8013      	strh	r3, [r2, #0]
 80029de:	e2da      	b.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d021      	beq.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 82ae 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a42:	441a      	add	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a50:	441a      	add	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d30b      	bcc.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a72:	1ad2      	subs	r2, r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	621a      	str	r2, [r3, #32]
 8002a78:	e017      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a92:	e00a      	b.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d165      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x382>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac6:	4413      	add	r3, r2
 8002ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8002af0:	d91d      	bls.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x332>
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x310>
 8002b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e044      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_PCD_EP_DB_Transmit+0x350>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	e035      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	3301      	adds	r3, #1
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	e01c      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d118      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b9a:	4413      	add	r3, r2
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	011a      	lsls	r2, r3, #4
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bb6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6959      	ldr	r1, [r3, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	891a      	ldrh	r2, [r3, #8]
 8002bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f003 fd80 	bl	80066ce <USB_WritePMA>
 8002bce:	e1e2      	b.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	3306      	adds	r3, #6
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d307      	bcc.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	619a      	str	r2, [r3, #24]
 8002c16:	e002      	b.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 80c0 	bne.w	8002da8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d126      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x482>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c44:	4413      	add	r3, r2
 8002c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e01a      	b.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d116      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9a:	4413      	add	r3, r2
 8002c9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	011a      	lsls	r2, r3, #4
 8002ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d12b      	bne.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd6:	4413      	add	r3, r2
 8002cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	011a      	lsls	r2, r3, #4
 8002ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ce8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	e017      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d113      	bne.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d30:	4413      	add	r3, r2
 8002d32:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f005 faaa 	bl	80082aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 811a 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8013      	strh	r3, [r2, #0]
 8002da6:	e0f6      	b.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d121      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	441a      	add	r2, r3
 8002dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 80ca 	bne.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e18:	441a      	add	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d30b      	bcc.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3a:	1ad2      	subs	r2, r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	621a      	str	r2, [r3, #32]
 8002e40:	e017      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e5a:	e00a      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d165      	bne.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x750>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e94:	4413      	add	r3, r2
 8002e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	011a      	lsls	r2, r3, #4
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ebe:	d91d      	bls.n	8002efc <HAL_PCD_EP_DB_Transmit+0x700>
 8002ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	e041      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e032      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x738>
 8002f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f30:	3301      	adds	r3, #1
 8002f32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4313      	orrs	r3, r2
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	e019      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d115      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f62:	4413      	add	r3, r2
 8002f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	011a      	lsls	r2, r3, #4
 8002f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	895a      	ldrh	r2, [r3, #10]
 8002f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f003 fb9c 	bl	80066ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fb0:	82bb      	strh	r3, [r7, #20]
 8002fb2:	8abb      	ldrh	r3, [r7, #20]
 8002fb4:	f083 0310 	eor.w	r3, r3, #16
 8002fb8:	82bb      	strh	r3, [r7, #20]
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	f083 0320 	eor.w	r3, r3, #32
 8002fc0:	82bb      	strh	r3, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	8abb      	ldrh	r3, [r7, #20]
 8002fd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3790      	adds	r7, #144	@ 0x90
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	4613      	mov	r3, r2
 8003000:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3310      	adds	r3, #16
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e009      	b.n	800303a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003026:	897a      	ldrh	r2, [r7, #10]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800303a:	893b      	ldrh	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	b29a      	uxth	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	80da      	strh	r2, [r3, #6]
 800304e:	e00b      	b.n	8003068 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2201      	movs	r2, #1
 8003054:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	b29a      	uxth	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b29a      	uxth	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e272      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8087 	beq.w	80031a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003094:	4b92      	ldr	r3, [pc, #584]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b04      	cmp	r3, #4
 800309e:	d00c      	beq.n	80030ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030a0:	4b8f      	ldr	r3, [pc, #572]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
 80030ac:	4b8c      	ldr	r3, [pc, #560]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	4b89      	ldr	r3, [pc, #548]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x12c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d168      	bne.n	80031a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e24c      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x76>
 80030dc:	4b80      	ldr	r3, [pc, #512]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7f      	ldr	r2, [pc, #508]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e02e      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x98>
 80030f2:	4b7b      	ldr	r3, [pc, #492]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7a      	ldr	r2, [pc, #488]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b78      	ldr	r3, [pc, #480]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a77      	ldr	r2, [pc, #476]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0xbc>
 8003116:	4b72      	ldr	r3, [pc, #456]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a71      	ldr	r2, [pc, #452]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6e      	ldr	r2, [pc, #440]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xd4>
 8003130:	4b6b      	ldr	r3, [pc, #428]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6a      	ldr	r2, [pc, #424]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b68      	ldr	r3, [pc, #416]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a67      	ldr	r2, [pc, #412]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fd fb2c 	bl	80007ac <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fd fb28 	bl	80007ac <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e200      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5d      	ldr	r3, [pc, #372]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xe4>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fd fb18 	bl	80007ac <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fd fb14 	bl	80007ac <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1ec      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b53      	ldr	r3, [pc, #332]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x10c>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ae:	4b4c      	ldr	r3, [pc, #304]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ba:	4b49      	ldr	r3, [pc, #292]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
 80031c6:	4b46      	ldr	r3, [pc, #280]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b43      	ldr	r3, [pc, #268]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c0      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3d      	ldr	r3, [pc, #244]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4939      	ldr	r1, [pc, #228]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <HAL_RCC_OscConfig+0x270>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fd facd 	bl	80007ac <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fd fac9 	bl	80007ac <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2d      	ldr	r3, [pc, #180]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b2a      	ldr	r3, [pc, #168]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4927      	ldr	r1, [pc, #156]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b26      	ldr	r3, [pc, #152]	@ (80032e4 <HAL_RCC_OscConfig+0x270>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd faac 	bl	80007ac <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7fd faa8 	bl	80007ac <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e180      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03a      	beq.n	80032f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b17      	ldr	r3, [pc, #92]	@ (80032e8 <HAL_RCC_OscConfig+0x274>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fd fa8c 	bl	80007ac <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fa88 	bl	80007ac <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e160      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f000 faba 	bl	8003830 <RCC_Delay>
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <HAL_RCC_OscConfig+0x274>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7fd fa72 	bl	80007ac <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fd fa6e 	bl	80007ac <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d908      	bls.n	80032ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e146      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	42420000 	.word	0x42420000
 80032e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b92      	ldr	r3, [pc, #584]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e9      	bne.n	80032cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a6 	beq.w	8003452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b8b      	ldr	r3, [pc, #556]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a87      	ldr	r2, [pc, #540]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	61d3      	str	r3, [r2, #28]
 8003322:	4b85      	ldr	r3, [pc, #532]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fd fa2f 	bl	80007ac <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fd fa2b 	bl	80007ac <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	@ 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e103      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b75      	ldr	r3, [pc, #468]	@ (800353c <HAL_RCC_OscConfig+0x4c8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x312>
 8003378:	4b6f      	ldr	r3, [pc, #444]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a6e      	ldr	r2, [pc, #440]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	e02d      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x334>
 800338e:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a69      	ldr	r2, [pc, #420]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4b67      	ldr	r3, [pc, #412]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a66      	ldr	r2, [pc, #408]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	e01c      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x356>
 80033b0:	4b61      	ldr	r3, [pc, #388]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4a60      	ldr	r2, [pc, #384]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6213      	str	r3, [r2, #32]
 80033bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0x36e>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	6213      	str	r3, [r2, #32]
 80033d6:	4b58      	ldr	r3, [pc, #352]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a57      	ldr	r2, [pc, #348]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d015      	beq.n	8003416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fd f9df 	bl	80007ac <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd f9db 	bl	80007ac <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0b1      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RCC_OscConfig+0x37e>
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fd f9c9 	bl	80007ac <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fd f9c5 	bl	80007ac <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e09b      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4b3c      	ldr	r3, [pc, #240]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d061      	beq.n	800352c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d146      	bne.n	80034fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd f999 	bl	80007ac <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd f995 	bl	80007ac <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e06d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003490:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a4:	d108      	bne.n	80034b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034a6:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4921      	ldr	r1, [pc, #132]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a19      	ldr	r1, [r3, #32]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	430b      	orrs	r3, r1
 80034ca:	491b      	ldr	r1, [pc, #108]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fd f969 	bl	80007ac <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fd f965 	bl	80007ac <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e03d      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x46a>
 80034fc:	e035      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fe:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fd f952 	bl	80007ac <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd f94e 	bl	80007ac <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e026      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x498>
 800352a:	e01e      	b.n	800356a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e019      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_OscConfig+0x500>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d0      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b67      	ldr	r3, [pc, #412]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4965      	ldr	r1, [pc, #404]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a58      	ldr	r2, [pc, #352]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d040      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e073      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3d      	ldr	r3, [pc, #244]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06b      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b39      	ldr	r3, [pc, #228]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4936      	ldr	r1, [pc, #216]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fd f8a0 	bl	80007ac <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fd f89c 	bl	80007ac <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e053      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d210      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0207 	bic.w	r2, r3, #7
 80036ae:	4922      	ldr	r1, [pc, #136]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fc fffe 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	08008810 	.word	0x08008810
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003766:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x30>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x36>
 800377a:	e027      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800377e:	613b      	str	r3, [r7, #16]
      break;
 8003780:	e027      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	0c9b      	lsrs	r3, r3, #18
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800379a:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0c5b      	lsrs	r3, r3, #17
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	4a11      	ldr	r2, [pc, #68]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ae:	fb03 f202 	mul.w	r2, r3, r2
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e004      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	613b      	str	r3, [r7, #16]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ce:	613b      	str	r3, [r7, #16]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	693b      	ldr	r3, [r7, #16]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	08008828 	.word	0x08008828
 80037ec:	08008838 	.word	0x08008838
 80037f0:	003d0900 	.word	0x003d0900

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b02      	ldr	r3, [pc, #8]	@ (8003804 <HAL_RCC_GetHCLKFreq+0x10>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	20000000 	.word	0x20000000

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff fff2 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0adb      	lsrs	r3, r3, #11
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	@ (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	08008820 	.word	0x08008820

08003830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003838:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <RCC_Delay+0x34>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <RCC_Delay+0x38>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0a5b      	lsrs	r3, r3, #9
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800384c:	bf00      	nop
  }
  while (Delay --);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e5a      	subs	r2, r3, #1
 8003852:	60fa      	str	r2, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f9      	bne.n	800384c <RCC_Delay+0x1c>
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	20000000 	.word	0x20000000
 8003868:	10624dd3 	.word	0x10624dd3

0800386c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d07d      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388c:	4b4f      	ldr	r3, [pc, #316]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b4c      	ldr	r3, [pc, #304]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4a4b      	ldr	r2, [pc, #300]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	61d3      	str	r3, [r2, #28]
 80038a4:	4b49      	ldr	r3, [pc, #292]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	4b46      	ldr	r3, [pc, #280]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d118      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c0:	4b43      	ldr	r3, [pc, #268]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a42      	ldr	r2, [pc, #264]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038cc:	f7fc ff6e 	bl	80007ac <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fc ff6a 	bl	80007ac <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e06d      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	4b3a      	ldr	r3, [pc, #232]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f2:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02e      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d027      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003910:	4b2e      	ldr	r3, [pc, #184]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003918:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800391a:	4b2e      	ldr	r3, [pc, #184]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003920:	4b2c      	ldr	r3, [pc, #176]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003926:	4a29      	ldr	r2, [pc, #164]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d014      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fc ff39 	bl	80007ac <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fc ff35 	bl	80007ac <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e036      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	4b1d      	ldr	r3, [pc, #116]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ee      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003960:	4b1a      	ldr	r3, [pc, #104]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4917      	ldr	r1, [pc, #92]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	4313      	orrs	r3, r2
 8003970:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b14      	ldr	r3, [pc, #80]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	4a13      	ldr	r2, [pc, #76]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	490b      	ldr	r1, [pc, #44]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4904      	ldr	r1, [pc, #16]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42420440 	.word	0x42420440

080039d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	f200 808a 	bhi.w	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d045      	beq.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d075      	beq.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a0e:	e082      	b.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a10:	4b46      	ldr	r3, [pc, #280]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a16:	4b45      	ldr	r3, [pc, #276]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d07b      	beq.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	0c9b      	lsrs	r3, r3, #18
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	4a41      	ldr	r2, [pc, #260]	@ (8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a2c:	5cd3      	ldrb	r3, [r2, r3]
 8003a2e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	0c5b      	lsrs	r3, r3, #17
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	4a3b      	ldr	r2, [pc, #236]	@ (8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a54:	4a38      	ldr	r2, [pc, #224]	@ (8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e004      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4a34      	ldr	r2, [pc, #208]	@ (8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a70:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	61bb      	str	r3, [r7, #24]
      break;
 8003a82:	e04a      	b.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4a2d      	ldr	r2, [pc, #180]	@ (8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
      break;
 8003a92:	e042      	b.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003a94:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa4:	d108      	bne.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e01f      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac2:	d109      	bne.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ac4:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003ad0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e00f      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ae2:	d11c      	bne.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003af0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003af4:	61bb      	str	r3, [r7, #24]
      break;
 8003af6:	e012      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003af8:	e011      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003afa:	f7ff fe85 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0b9b      	lsrs	r3, r3, #14
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	61bb      	str	r3, [r7, #24]
      break;
 8003b14:	e004      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b1e:	bf00      	nop
    }
  }
  return (frequency);
 8003b20:	69bb      	ldr	r3, [r7, #24]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	0800883c 	.word	0x0800883c
 8003b34:	0800884c 	.word	0x0800884c
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	003d0900 	.word	0x003d0900
 8003b40:	aaaaaaab 	.word	0xaaaaaaab

08003b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e041      	b.n	8003bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fc fd48 	bl	8000600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 f940 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d001      	beq.n	8003bfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e032      	b.n	8003c62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a18      	ldr	r2, [pc, #96]	@ (8003c6c <HAL_TIM_Base_Start+0x88>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_Base_Start+0x48>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_Base_Start+0x48>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a14      	ldr	r2, [pc, #80]	@ (8003c70 <HAL_TIM_Base_Start+0x8c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_Base_Start+0x48>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a13      	ldr	r2, [pc, #76]	@ (8003c74 <HAL_TIM_Base_Start+0x90>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d111      	bne.n	8003c50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d010      	beq.n	8003c60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	e007      	b.n	8003c60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800

08003c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIM_ConfigClockSource+0x1c>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0b4      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x186>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ccc:	d03e      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xd4>
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd2:	f200 8087 	bhi.w	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cda:	f000 8086 	beq.w	8003dea <HAL_TIM_ConfigClockSource+0x172>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce2:	d87f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b70      	cmp	r3, #112	@ 0x70
 8003ce6:	d01a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xa6>
 8003ce8:	2b70      	cmp	r3, #112	@ 0x70
 8003cea:	d87b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b60      	cmp	r3, #96	@ 0x60
 8003cee:	d050      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x11a>
 8003cf0:	2b60      	cmp	r3, #96	@ 0x60
 8003cf2:	d877      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b50      	cmp	r3, #80	@ 0x50
 8003cf6:	d03c      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xfa>
 8003cf8:	2b50      	cmp	r3, #80	@ 0x50
 8003cfa:	d873      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d058      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d86f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b30      	cmp	r3, #48	@ 0x30
 8003d06:	d064      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b30      	cmp	r3, #48	@ 0x30
 8003d0a:	d86b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d060      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d867      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05c      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d05a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	e062      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	f000 f950 	bl	8003fd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e04f      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	f000 f939 	bl	8003fd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d6e:	609a      	str	r2, [r3, #8]
      break;
 8003d70:	e03c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 f8b0 	bl	8003ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2150      	movs	r1, #80	@ 0x50
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f907 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003d90:	e02c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 f8ce 	bl	8003f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2160      	movs	r1, #96	@ 0x60
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f8f7 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003db0:	e01c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 f890 	bl	8003ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2140      	movs	r1, #64	@ 0x40
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f8e7 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f000 f8de 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003de2:	e003      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed8 <TIM_Base_SetConfig+0xd0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003edc <TIM_Base_SetConfig+0xd4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee0 <TIM_Base_SetConfig+0xd8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ed8 <TIM_Base_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <TIM_Base_SetConfig+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <TIM_Base_SetConfig+0xd8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed8 <TIM_Base_SetConfig+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f023 0201 	bic.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	611a      	str	r2, [r3, #16]
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800

08003ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f023 030a 	bic.w	r3, r3, #10
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0210 	bic.w	r2, r3, #16
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	031b      	lsls	r3, r3, #12
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f043 0307 	orr.w	r3, r3, #7
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	609a      	str	r2, [r3, #8]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004024:	2302      	movs	r3, #2
 8004026:	e046      	b.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004074:	d009      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a12      	ldr	r2, [pc, #72]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a10      	ldr	r2, [pc, #64]	@ (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10c      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4313      	orrs	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800

080040cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4638      	mov	r0, r7
 80040d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040f6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80040fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800411a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800411e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	b29b      	uxth	r3, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	4013      	ands	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	4638      	mov	r0, r7
 8004168:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b09d      	sub	sp, #116	@ 0x74
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	78db      	ldrb	r3, [r3, #3]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d81f      	bhi.n	800420a <USB_ActivateEndpoint+0x72>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <USB_ActivateEndpoint+0x38>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004213 	.word	0x08004213
 80041dc:	080041ef 	.word	0x080041ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041ec:	e012      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041f2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80041f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041fa:	e00b      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004208:	e004      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004210:	e000      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
      break;
 8004212:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424c:	b29b      	uxth	r3, r3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800426a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800426e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	7b1b      	ldrb	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 8178 	bne.w	8004574 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8084 	beq.w	8004396 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	88db      	ldrh	r3, [r3, #6]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	827b      	strh	r3, [r7, #18]
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01b      	beq.n	8004312 <USB_ActivateEndpoint+0x17a>
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f0:	823b      	strh	r3, [r7, #16]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	8a3b      	ldrh	r3, [r7, #16]
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800430a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d020      	beq.n	800435c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004330:	81bb      	strh	r3, [r7, #12]
 8004332:	89bb      	ldrh	r3, [r7, #12]
 8004334:	f083 0320 	eor.w	r3, r3, #32
 8004338:	81bb      	strh	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	89bb      	ldrh	r3, [r7, #12]
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
 800435a:	e2d5      	b.n	8004908 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800436e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004372:	81fb      	strh	r3, [r7, #14]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800438c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
 8004394:	e2b8      	b.n	8004908 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	4413      	add	r3, r2
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	011a      	lsls	r2, r3, #4
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	88db      	ldrh	r3, [r3, #6]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	4413      	add	r3, r2
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	011a      	lsls	r2, r3, #4
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b3e      	cmp	r3, #62	@ 0x3e
 8004404:	d91d      	bls.n	8004442 <USB_ActivateEndpoint+0x2aa>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <USB_ActivateEndpoint+0x288>
 800441a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441c:	3b01      	subs	r3, #1
 800441e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29a      	uxth	r2, r3
 8004426:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004428:	b29b      	uxth	r3, r3
 800442a:	029b      	lsls	r3, r3, #10
 800442c:	b29b      	uxth	r3, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443a:	b29a      	uxth	r2, r3
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e026      	b.n	8004490 <USB_ActivateEndpoint+0x2f8>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <USB_ActivateEndpoint+0x2c8>
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004458:	b29a      	uxth	r2, r3
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e017      	b.n	8004490 <USB_ActivateEndpoint+0x2f8>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <USB_ActivateEndpoint+0x2e2>
 8004474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004476:	3301      	adds	r3, #1
 8004478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29a      	uxth	r2, r3
 8004480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004482:	b29b      	uxth	r3, r3
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	b29b      	uxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b29a      	uxth	r2, r3
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800449e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <USB_ActivateEndpoint+0x348>
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	843b      	strh	r3, [r7, #32]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	8c3b      	ldrh	r3, [r7, #32]
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d124      	bne.n	8004532 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	83bb      	strh	r3, [r7, #28]
 8004500:	8bbb      	ldrh	r3, [r7, #28]
 8004502:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004506:	83bb      	strh	r3, [r7, #28]
 8004508:	8bbb      	ldrh	r3, [r7, #28]
 800450a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800450e:	83bb      	strh	r3, [r7, #28]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	8bbb      	ldrh	r3, [r7, #28]
 800451c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452c:	b29b      	uxth	r3, r3
 800452e:	8013      	strh	r3, [r2, #0]
 8004530:	e1ea      	b.n	8004908 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004548:	83fb      	strh	r3, [r7, #30]
 800454a:	8bfb      	ldrh	r3, [r7, #30]
 800454c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004550:	83fb      	strh	r3, [r7, #30]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8bfb      	ldrh	r3, [r7, #30]
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
 8004572:	e1c9      	b.n	8004908 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	78db      	ldrb	r3, [r3, #3]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d11e      	bne.n	80045ba <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80045a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80045b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
 80045b8:	e01d      	b.n	80045f6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80045cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004606:	4413      	add	r3, r2
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	011a      	lsls	r2, r3, #4
 8004610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004612:	4413      	add	r3, r2
 8004614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	891b      	ldrh	r3, [r3, #8]
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	657b      	str	r3, [r7, #84]	@ 0x54
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463a:	4413      	add	r3, r2
 800463c:	657b      	str	r3, [r7, #84]	@ 0x54
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	011a      	lsls	r2, r3, #4
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	4413      	add	r3, r2
 8004648:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800464c:	653b      	str	r3, [r7, #80]	@ 0x50
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	895b      	ldrh	r3, [r3, #10]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 8093 	bne.w	800478e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004678:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800467c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <USB_ActivateEndpoint+0x524>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80046ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <USB_ActivateEndpoint+0x574>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004704:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800471e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004722:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004724:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004726:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800472a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800472c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800472e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004732:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800476a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e0bc      	b.n	8004908 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800479e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01d      	beq.n	80047e6 <USB_ActivateEndpoint+0x64e>
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80047f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01d      	beq.n	800483e <USB_ActivateEndpoint+0x6a6>
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004818:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800482a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004836:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	78db      	ldrb	r3, [r3, #3]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d024      	beq.n	8004890 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800485c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004860:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004864:	f083 0320 	eor.w	r3, r3, #32
 8004868:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004908:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800490c:	4618      	mov	r0, r3
 800490e:	3774      	adds	r7, #116	@ 0x74
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004918:	b480      	push	{r7}
 800491a:	b08d      	sub	sp, #52	@ 0x34
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	7b1b      	ldrb	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 808e 	bne.w	8004a48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d044      	beq.n	80049be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	81bb      	strh	r3, [r7, #12]
 8004942:	89bb      	ldrh	r3, [r7, #12]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <USB_DeactivateEndpoint+0x6c>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	817b      	strh	r3, [r7, #10]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004980:	b29b      	uxth	r3, r3
 8004982:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800499a:	813b      	strh	r3, [r7, #8]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	893b      	ldrh	r3, [r7, #8]
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]
 80049bc:	e192      	b.n	8004ce4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	827b      	strh	r3, [r7, #18]
 80049cc:	8a7b      	ldrh	r3, [r7, #18]
 80049ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <USB_DeactivateEndpoint+0xf6>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	823b      	strh	r3, [r7, #16]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8a3b      	ldrh	r3, [r7, #16]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a24:	81fb      	strh	r3, [r7, #14]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
 8004a46:	e14d      	b.n	8004ce4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 80a5 	bne.w	8004b9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	843b      	strh	r3, [r7, #32]
 8004a60:	8c3b      	ldrh	r3, [r7, #32]
 8004a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01b      	beq.n	8004aa2 <USB_DeactivateEndpoint+0x18a>
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a80:	83fb      	strh	r3, [r7, #30]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	8bfb      	ldrh	r3, [r7, #30]
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	83bb      	strh	r3, [r7, #28]
 8004ab0:	8bbb      	ldrh	r3, [r7, #28]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01b      	beq.n	8004af2 <USB_DeactivateEndpoint+0x1da>
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad0:	837b      	strh	r3, [r7, #26]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b08:	833b      	strh	r3, [r7, #24]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	8b3b      	ldrh	r3, [r7, #24]
 8004b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b40:	82fb      	strh	r3, [r7, #22]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b78:	82bb      	strh	r3, [r7, #20]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8abb      	ldrh	r3, [r7, #20]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
 8004b9a:	e0a3      	b.n	8004ce4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004baa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <USB_DeactivateEndpoint+0x2d4>
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004bfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <USB_DeactivateEndpoint+0x324>
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c52:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3734      	adds	r7, #52	@ 0x34
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0c2      	sub	sp, #264	@ 0x108
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cfe:	6018      	str	r0, [r3, #0]
 8004d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d08:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	f040 86b7 	bne.w	8005a8a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d908      	bls.n	8004d4a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d48:	e007      	b.n	8004d5a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	7b1b      	ldrb	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d13a      	bne.n	8004de0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6959      	ldr	r1, [r3, #20]
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	88da      	ldrh	r2, [r3, #6]
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d90:	6800      	ldr	r0, [r0, #0]
 8004d92:	f001 fc9c 	bl	80066ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	f000 be1f 	b.w	8005a1e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	f040 8462 	bne.w	80056b6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	f240 83df 	bls.w	80055ce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e36:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e60:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7c:	1ad2      	subs	r2, r2, r3
 8004e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 81c7 	beq.w	8005240 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d177      	bne.n	8004fbe <USB_EPStartXfer+0x2ce>
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	4413      	add	r3, r2
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	4413      	add	r3, r2
 8004f04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f20:	d921      	bls.n	8004f66 <USB_EPStartXfer+0x276>
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <USB_EPStartXfer+0x252>
 8004f38:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	029b      	lsls	r3, r3, #10
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	801a      	strh	r2, [r3, #0]
 8004f64:	e050      	b.n	8005008 <USB_EPStartXfer+0x318>
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <USB_EPStartXfer+0x294>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e041      	b.n	8005008 <USB_EPStartXfer+0x318>
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <USB_EPStartXfer+0x2b4>
 8004f9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e024      	b.n	8005008 <USB_EPStartXfer+0x318>
 8004fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d11c      	bne.n	8005008 <USB_EPStartXfer+0x318>
 8004fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	4413      	add	r3, r2
 8004fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	011a      	lsls	r2, r3, #4
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	b29a      	uxth	r2, r3
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	895b      	ldrh	r3, [r3, #10]
 8005014:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6959      	ldr	r1, [r3, #20]
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	b29b      	uxth	r3, r3
 800502a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800502e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005032:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005036:	6800      	ldr	r0, [r0, #0]
 8005038:	f001 fb49 	bl	80066ce <USB_WritePMA>
            ep->xfer_buff += len;
 800503c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	441a      	add	r2, r3
 800504e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800505a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1a      	ldr	r2, [r3, #32]
 8005066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	429a      	cmp	r2, r3
 8005074:	d90f      	bls.n	8005096 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	621a      	str	r2, [r3, #32]
 8005094:	e00e      	b.n	80050b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80050a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d177      	bne.n	80051b4 <USB_EPStartXfer+0x4c4>
 80050c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	4413      	add	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	011a      	lsls	r2, r3, #4
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4413      	add	r3, r2
 80050fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510a:	b29a      	uxth	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	2b3e      	cmp	r3, #62	@ 0x3e
 8005116:	d921      	bls.n	800515c <USB_EPStartXfer+0x46c>
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <USB_EPStartXfer+0x448>
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005132:	3b01      	subs	r3, #1
 8005134:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29a      	uxth	r2, r3
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005142:	b29b      	uxth	r3, r3
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	b29b      	uxth	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e056      	b.n	800520a <USB_EPStartXfer+0x51a>
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <USB_EPStartXfer+0x48a>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005172:	b29a      	uxth	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	801a      	strh	r2, [r3, #0]
 8005178:	e047      	b.n	800520a <USB_EPStartXfer+0x51a>
 800517a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <USB_EPStartXfer+0x4aa>
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005194:	3301      	adds	r3, #1
 8005196:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	e02a      	b.n	800520a <USB_EPStartXfer+0x51a>
 80051b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d122      	bne.n	800520a <USB_EPStartXfer+0x51a>
 80051c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	4413      	add	r3, r2
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4413      	add	r3, r2
 80051fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005204:	b29a      	uxth	r2, r3
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	891b      	ldrh	r3, [r3, #8]
 8005216:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800521a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6959      	ldr	r1, [r3, #20]
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522a:	b29b      	uxth	r3, r3
 800522c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005230:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005234:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005238:	6800      	ldr	r0, [r0, #0]
 800523a:	f001 fa48 	bl	80066ce <USB_WritePMA>
 800523e:	e3ee      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d177      	bne.n	8005340 <USB_EPStartXfer+0x650>
 8005250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800525c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005270:	4413      	add	r3, r2
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011a      	lsls	r2, r3, #4
 8005282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005284:	4413      	add	r3, r2
 8005286:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
 800528c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005296:	b29a      	uxth	r2, r3
 8005298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80052a2:	d921      	bls.n	80052e8 <USB_EPStartXfer+0x5f8>
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <USB_EPStartXfer+0x5d4>
 80052ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052be:	3b01      	subs	r3, #1
 80052c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e056      	b.n	8005396 <USB_EPStartXfer+0x6a6>
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <USB_EPStartXfer+0x616>
 80052f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e047      	b.n	8005396 <USB_EPStartXfer+0x6a6>
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <USB_EPStartXfer+0x636>
 800531c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005320:	3301      	adds	r3, #1
 8005322:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005330:	b29b      	uxth	r3, r3
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	b29b      	uxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e02a      	b.n	8005396 <USB_EPStartXfer+0x6a6>
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d122      	bne.n	8005396 <USB_EPStartXfer+0x6a6>
 8005350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	653b      	str	r3, [r7, #80]	@ 0x50
 800535c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800536a:	b29b      	uxth	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005370:	4413      	add	r3, r2
 8005372:	653b      	str	r3, [r7, #80]	@ 0x50
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	011a      	lsls	r2, r3, #4
 8005382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005384:	4413      	add	r3, r2
 8005386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800538a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	b29a      	uxth	r2, r3
 8005392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	891b      	ldrh	r3, [r3, #8]
 80053a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6959      	ldr	r1, [r3, #20]
 80053b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053c4:	6800      	ldr	r0, [r0, #0]
 80053c6:	f001 f982 	bl	80066ce <USB_WritePMA>
            ep->xfer_buff += len;
 80053ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	441a      	add	r2, r3
 80053dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d90f      	bls.n	8005424 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	621a      	str	r2, [r3, #32]
 8005422:	e00e      	b.n	8005442 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	643b      	str	r3, [r7, #64]	@ 0x40
 800544e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d177      	bne.n	800554e <USB_EPStartXfer+0x85e>
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	63bb      	str	r3, [r7, #56]	@ 0x38
 800546a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	4413      	add	r3, r2
 8005480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	011a      	lsls	r2, r3, #4
 8005490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005492:	4413      	add	r3, r2
 8005494:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
 800549a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80054b0:	d921      	bls.n	80054f6 <USB_EPStartXfer+0x806>
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <USB_EPStartXfer+0x7e2>
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	3b01      	subs	r3, #1
 80054ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e050      	b.n	8005598 <USB_EPStartXfer+0x8a8>
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <USB_EPStartXfer+0x824>
 80054fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550c:	b29a      	uxth	r2, r3
 800550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e041      	b.n	8005598 <USB_EPStartXfer+0x8a8>
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <USB_EPStartXfer+0x844>
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552e:	3301      	adds	r3, #1
 8005530:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29a      	uxth	r2, r3
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	b29b      	uxth	r3, r3
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	b29b      	uxth	r3, r3
 8005544:	4313      	orrs	r3, r2
 8005546:	b29a      	uxth	r2, r3
 8005548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e024      	b.n	8005598 <USB_EPStartXfer+0x8a8>
 800554e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d11c      	bne.n	8005598 <USB_EPStartXfer+0x8a8>
 800555e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005572:	4413      	add	r3, r2
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	011a      	lsls	r2, r3, #4
 8005584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005586:	4413      	add	r3, r2
 8005588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800558c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005592:	b29a      	uxth	r2, r3
 8005594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005596:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	895b      	ldrh	r3, [r3, #10]
 80055a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6959      	ldr	r1, [r3, #20]
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	f001 f881 	bl	80066ce <USB_WritePMA>
 80055cc:	e227      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005604:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800563a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565a:	4413      	add	r3, r2
 800565c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	011a      	lsls	r2, r3, #4
 800566c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566e:	4413      	add	r3, r2
 8005670:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005674:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567a:	b29a      	uxth	r2, r3
 800567c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800567e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	891b      	ldrh	r3, [r3, #8]
 800568c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6959      	ldr	r1, [r3, #20]
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	f001 f80d 	bl	80066ce <USB_WritePMA>
 80056b4:	e1b3      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80c6 	beq.w	8005888 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	673b      	str	r3, [r7, #112]	@ 0x70
 8005708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d177      	bne.n	8005808 <USB_EPStartXfer+0xb18>
 8005718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005738:	4413      	add	r3, r2
 800573a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800573c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800574c:	4413      	add	r3, r2
 800574e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005752:	667b      	str	r3, [r7, #100]	@ 0x64
 8005754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575e:	b29a      	uxth	r2, r3
 8005760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005768:	2b3e      	cmp	r3, #62	@ 0x3e
 800576a:	d921      	bls.n	80057b0 <USB_EPStartXfer+0xac0>
 800576c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <USB_EPStartXfer+0xa9c>
 8005782:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005786:	3b01      	subs	r3, #1
 8005788:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800578c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29a      	uxth	r2, r3
 8005792:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005796:	b29b      	uxth	r3, r3
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	b29b      	uxth	r3, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e050      	b.n	8005852 <USB_EPStartXfer+0xb62>
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <USB_EPStartXfer+0xade>
 80057b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e041      	b.n	8005852 <USB_EPStartXfer+0xb62>
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <USB_EPStartXfer+0xafe>
 80057e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057e8:	3301      	adds	r3, #1
 80057ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e024      	b.n	8005852 <USB_EPStartXfer+0xb62>
 8005808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d11c      	bne.n	8005852 <USB_EPStartXfer+0xb62>
 8005818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800582c:	4413      	add	r3, r2
 800582e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	011a      	lsls	r2, r3, #4
 800583e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005840:	4413      	add	r3, r2
 8005842:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	b29a      	uxth	r2, r3
 800584e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005850:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	895b      	ldrh	r3, [r3, #10]
 800585e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6959      	ldr	r1, [r3, #20]
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005872:	b29b      	uxth	r3, r3
 8005874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005878:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800587c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005880:	6800      	ldr	r0, [r0, #0]
 8005882:	f000 ff24 	bl	80066ce <USB_WritePMA>
 8005886:	e0ca      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d177      	bne.n	8005988 <USB_EPStartXfer+0xc98>
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058b8:	4413      	add	r3, r2
 80058ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	011a      	lsls	r2, r3, #4
 80058ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058cc:	4413      	add	r3, r2
 80058ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80058ea:	d921      	bls.n	8005930 <USB_EPStartXfer+0xc40>
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <USB_EPStartXfer+0xc1c>
 8005902:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005906:	3b01      	subs	r3, #1
 8005908:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800590c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29a      	uxth	r2, r3
 8005912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	b29b      	uxth	r3, r3
 8005920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005928:	b29a      	uxth	r2, r3
 800592a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e05c      	b.n	80059ea <USB_EPStartXfer+0xcfa>
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <USB_EPStartXfer+0xc5e>
 8005938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005946:	b29a      	uxth	r2, r3
 8005948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e04d      	b.n	80059ea <USB_EPStartXfer+0xcfa>
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <USB_EPStartXfer+0xc7e>
 8005964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005968:	3301      	adds	r3, #1
 800596a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800596e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29a      	uxth	r2, r3
 8005974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29b      	uxth	r3, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e030      	b.n	80059ea <USB_EPStartXfer+0xcfa>
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d128      	bne.n	80059ea <USB_EPStartXfer+0xcfa>
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059bc:	4413      	add	r3, r2
 80059be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	011a      	lsls	r2, r3, #4
 80059d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	891b      	ldrh	r3, [r3, #8]
 80059f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a18:	6800      	ldr	r0, [r0, #0]
 8005a1a:	f000 fe58 	bl	80066ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	f083 0310 	eor.w	r3, r3, #16
 8005a4c:	817b      	strh	r3, [r7, #10]
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	f083 0320 	eor.w	r3, r3, #32
 8005a54:	817b      	strh	r3, [r7, #10]
 8005a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	f000 bcde 	b.w	8006446 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	7b1b      	ldrb	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f040 80bb 	bne.w	8005c12 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d917      	bls.n	8005ae8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	619a      	str	r2, [r3, #24]
 8005ae6:	e00e      	b.n	8005b06 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	011a      	lsls	r2, r3, #4
 8005b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b66:	d924      	bls.n	8005bb2 <USB_EPStartXfer+0xec2>
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <USB_EPStartXfer+0xe98>
 8005b7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b82:	3b01      	subs	r3, #1
 8005b84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	f000 bc10 	b.w	80063d2 <USB_EPStartXfer+0x16e2>
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10c      	bne.n	8005bd4 <USB_EPStartXfer+0xee4>
 8005bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e3fe      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <USB_EPStartXfer+0xf04>
 8005bea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e3df      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	f040 8218 	bne.w	8006054 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 809d 	bne.w	8005d70 <USB_EPStartXfer+0x1080>
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	011a      	lsls	r2, r3, #4
 8005c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c72:	4413      	add	r3, r2
 8005c74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c9e:	d92b      	bls.n	8005cf8 <USB_EPStartXfer+0x1008>
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <USB_EPStartXfer+0xfe0>
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	e070      	b.n	8005dda <USB_EPStartXfer+0x10ea>
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10c      	bne.n	8005d22 <USB_EPStartXfer+0x1032>
 8005d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e05b      	b.n	8005dda <USB_EPStartXfer+0x10ea>
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <USB_EPStartXfer+0x1062>
 8005d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4313      	orrs	r3, r2
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e034      	b.n	8005dda <USB_EPStartXfer+0x10ea>
 8005d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d12c      	bne.n	8005dda <USB_EPStartXfer+0x10ea>
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005da4:	4413      	add	r3, r2
 8005da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	011a      	lsls	r2, r3, #4
 8005db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 809d 	bne.w	8005f34 <USB_EPStartXfer+0x1244>
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e1e:	4413      	add	r3, r2
 8005e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e62:	d92b      	bls.n	8005ebc <USB_EPStartXfer+0x11cc>
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0x11a4>
 8005e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e069      	b.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <USB_EPStartXfer+0x11f6>
 8005ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e054      	b.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <USB_EPStartXfer+0x1226>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	3301      	adds	r3, #1
 8005f12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e02d      	b.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d125      	bne.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	011a      	lsls	r2, r3, #4
 8005f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f72:	4413      	add	r3, r2
 8005f74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f8e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8218 	beq.w	80063d2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fc2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <USB_EPStartXfer+0x12ea>
 8005fce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10d      	bne.n	8005ff6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 81f5 	bne.w	80063d2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fe8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f040 81ee 	bne.w	80063d2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
 8006052:	e1be      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 81b4 	bne.w	80063ce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d917      	bls.n	80060b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	619a      	str	r2, [r3, #24]
 80060b0:	e00e      	b.n	80060d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80060b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8085 	bne.w	80061ec <USB_EPStartXfer+0x14fc>
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006106:	4413      	add	r3, r2
 8006108:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	011a      	lsls	r2, r3, #4
 800611a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800611e:	4413      	add	r3, r2
 8006120:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	2b3e      	cmp	r3, #62	@ 0x3e
 8006142:	d923      	bls.n	800618c <USB_EPStartXfer+0x149c>
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <USB_EPStartXfer+0x1474>
 800615a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800615e:	3b01      	subs	r3, #1
 8006160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29a      	uxth	r2, r3
 800616c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006170:	b29b      	uxth	r3, r3
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	b29b      	uxth	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	e060      	b.n	800624e <USB_EPStartXfer+0x155e>
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <USB_EPStartXfer+0x14be>
 8006194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e04f      	b.n	800624e <USB_EPStartXfer+0x155e>
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <USB_EPStartXfer+0x14de>
 80061c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c8:	3301      	adds	r3, #1
 80061ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	e030      	b.n	800624e <USB_EPStartXfer+0x155e>
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d128      	bne.n	800624e <USB_EPStartXfer+0x155e>
 80061fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006220:	4413      	add	r3, r2
 8006222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	011a      	lsls	r2, r3, #4
 8006234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006238:	4413      	add	r3, r2
 800623a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f040 8085 	bne.w	8006378 <USB_EPStartXfer+0x1688>
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006292:	4413      	add	r3, r2
 8006294:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	011a      	lsls	r2, r3, #4
 80062a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062aa:	4413      	add	r3, r2
 80062ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ce:	d923      	bls.n	8006318 <USB_EPStartXfer+0x1628>
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <USB_EPStartXfer+0x1600>
 80062e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ea:	3b01      	subs	r3, #1
 80062ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	029b      	lsls	r3, r3, #10
 8006300:	b29b      	uxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e05c      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <USB_EPStartXfer+0x164a>
 8006320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e04b      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <USB_EPStartXfer+0x166a>
 8006350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800635a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006366:	b29b      	uxth	r3, r3
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	b29b      	uxth	r3, r3
 800636c:	4313      	orrs	r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e02c      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d124      	bne.n	80063d2 <USB_EPStartXfer+0x16e2>
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800639e:	4413      	add	r3, r2
 80063a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	011a      	lsls	r2, r3, #4
 80063b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063b6:	4413      	add	r3, r2
 80063b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e001      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e03a      	b.n	8006448 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80063fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006400:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006404:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800640c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006410:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647a:	81bb      	strh	r3, [r7, #12]
 800647c:	89bb      	ldrh	r3, [r7, #12]
 800647e:	f083 0310 	eor.w	r3, r3, #16
 8006482:	81bb      	strh	r3, [r7, #12]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	89bb      	ldrh	r3, [r7, #12]
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]
 80064a4:	e01f      	b.n	80064e6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064bc:	81fb      	strh	r3, [r7, #14]
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064c4:	81fb      	strh	r3, [r7, #14]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	89fb      	ldrh	r3, [r7, #14]
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr

080064f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	7b1b      	ldrb	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 809d 	bne.w	8006640 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d04c      	beq.n	80065a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	823b      	strh	r3, [r7, #16]
 800651c:	8a3b      	ldrh	r3, [r7, #16]
 800651e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01b      	beq.n	800655e <USB_EPClearStall+0x6c>
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653c:	81fb      	strh	r3, [r7, #14]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	89fb      	ldrh	r3, [r7, #14]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d06c      	beq.n	8006640 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800657c:	81bb      	strh	r3, [r7, #12]
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	f083 0320 	eor.w	r3, r3, #32
 8006584:	81bb      	strh	r3, [r7, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	89bb      	ldrh	r3, [r7, #12]
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
 80065a6:	e04b      	b.n	8006640 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	82fb      	strh	r3, [r7, #22]
 80065b6:	8afb      	ldrh	r3, [r7, #22]
 80065b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01b      	beq.n	80065f8 <USB_EPClearStall+0x106>
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d6:	82bb      	strh	r3, [r7, #20]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	8abb      	ldrh	r3, [r7, #20]
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	827b      	strh	r3, [r7, #18]
 8006610:	8a7b      	ldrh	r3, [r7, #18]
 8006612:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006616:	827b      	strh	r3, [r7, #18]
 8006618:	8a7b      	ldrh	r3, [r7, #18]
 800661a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800661e:	827b      	strh	r3, [r7, #18]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	8a7b      	ldrh	r3, [r7, #18]
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2280      	movs	r2, #128	@ 0x80
 8006662:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066ac:	68fb      	ldr	r3, [r7, #12]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b08b      	sub	sp, #44	@ 0x2c
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	4611      	mov	r1, r2
 80066da:	461a      	mov	r2, r3
 80066dc:	460b      	mov	r3, r1
 80066de:	80fb      	strh	r3, [r7, #6]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066e4:	88bb      	ldrh	r3, [r7, #4]
 80066e6:	3301      	adds	r3, #1
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	005a      	lsls	r2, r3, #1
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006700:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	e01e      	b.n	8006746 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3301      	adds	r3, #1
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	b21a      	sxth	r2, r3
 8006718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800671c:	4313      	orrs	r3, r2
 800671e:	b21b      	sxth	r3, r3
 8006720:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	8a7a      	ldrh	r2, [r7, #18]
 8006726:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	3302      	adds	r3, #2
 800672c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	3302      	adds	r3, #2
 8006732:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	3b01      	subs	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1dd      	bne.n	8006708 <USB_WritePMA+0x3a>
  }
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	372c      	adds	r7, #44	@ 0x2c
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006758:	b480      	push	{r7}
 800675a:	b08b      	sub	sp, #44	@ 0x2c
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	80fb      	strh	r3, [r7, #6]
 800676a:	4613      	mov	r3, r2
 800676c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800676e:	88bb      	ldrh	r3, [r7, #4]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	b29b      	uxth	r3, r3
 8006774:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	005a      	lsls	r2, r3, #1
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800678a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006790:	e01b      	b.n	80067ca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	3302      	adds	r3, #2
 800679e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	3301      	adds	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	3302      	adds	r3, #2
 80067c2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	3b01      	subs	r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e0      	bne.n	8006792 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80067d0:	88bb      	ldrh	r3, [r7, #4]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	701a      	strb	r2, [r3, #0]
  }
}
 80067ec:	bf00      	nop
 80067ee:	372c      	adds	r7, #44	@ 0x2c
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7c1b      	ldrb	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d115      	bne.n	800683a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800680e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006812:	2202      	movs	r2, #2
 8006814:	2181      	movs	r1, #129	@ 0x81
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fe2b 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006826:	2202      	movs	r2, #2
 8006828:	2101      	movs	r1, #1
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fe21 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006838:	e012      	b.n	8006860 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800683a:	2340      	movs	r3, #64	@ 0x40
 800683c:	2202      	movs	r2, #2
 800683e:	2181      	movs	r1, #129	@ 0x81
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 fe16 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800684c:	2340      	movs	r3, #64	@ 0x40
 800684e:	2202      	movs	r2, #2
 8006850:	2101      	movs	r1, #1
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fe0d 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006860:	2308      	movs	r3, #8
 8006862:	2203      	movs	r2, #3
 8006864:	2182      	movs	r1, #130	@ 0x82
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fe03 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006872:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006876:	f001 ff23 	bl	80086c0 <USBD_static_malloc>
 800687a:	4602      	mov	r2, r0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
 8006890:	e026      	b.n	80068e0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006898:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7c1b      	ldrb	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068c6:	2101      	movs	r1, #1
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fec2 	bl	8008652 <USBD_LL_PrepareReceive>
 80068ce:	e007      	b.n	80068e0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068d6:	2340      	movs	r3, #64	@ 0x40
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 feb9 	bl	8008652 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068fa:	2181      	movs	r1, #129	@ 0x81
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 fdde 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006908:	2101      	movs	r1, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fdd7 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006918:	2182      	movs	r1, #130	@ 0x82
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fdcf 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00e      	beq.n	800694e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fec9 	bl	80086d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006968:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800697e:	2b00      	cmp	r3, #0
 8006980:	d039      	beq.n	80069f6 <USBD_CDC_Setup+0x9e>
 8006982:	2b20      	cmp	r3, #32
 8006984:	d17f      	bne.n	8006a86 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	88db      	ldrh	r3, [r3, #6]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d029      	beq.n	80069e2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b25b      	sxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	da11      	bge.n	80069bc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	88d2      	ldrh	r2, [r2, #6]
 80069aa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069ac:	6939      	ldr	r1, [r7, #16]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f9d5 	bl	8007d64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069ba:	e06b      	b.n	8006a94 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	785a      	ldrb	r2, [r3, #1]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	88db      	ldrh	r3, [r3, #6]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069d2:	6939      	ldr	r1, [r7, #16]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	88db      	ldrh	r3, [r3, #6]
 80069d8:	461a      	mov	r2, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 f9f0 	bl	8007dc0 <USBD_CtlPrepareRx>
      break;
 80069e0:	e058      	b.n	8006a94 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	7850      	ldrb	r0, [r2, #1]
 80069ee:	2200      	movs	r2, #0
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	4798      	blx	r3
      break;
 80069f4:	e04e      	b.n	8006a94 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b0b      	cmp	r3, #11
 80069fc:	d02e      	beq.n	8006a5c <USBD_CDC_Setup+0x104>
 80069fe:	2b0b      	cmp	r3, #11
 8006a00:	dc38      	bgt.n	8006a74 <USBD_CDC_Setup+0x11c>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <USBD_CDC_Setup+0xb4>
 8006a06:	2b0a      	cmp	r3, #10
 8006a08:	d014      	beq.n	8006a34 <USBD_CDC_Setup+0xdc>
 8006a0a:	e033      	b.n	8006a74 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d107      	bne.n	8006a26 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a16:	f107 030c 	add.w	r3, r7, #12
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 f9a0 	bl	8007d64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a24:	e02e      	b.n	8006a84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f931 	bl	8007c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	75fb      	strb	r3, [r7, #23]
          break;
 8006a32:	e027      	b.n	8006a84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d107      	bne.n	8006a4e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a3e:	f107 030f 	add.w	r3, r7, #15
 8006a42:	2201      	movs	r2, #1
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f98c 	bl	8007d64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a4c:	e01a      	b.n	8006a84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 f91d 	bl	8007c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a56:	2302      	movs	r3, #2
 8006a58:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5a:	e013      	b.n	8006a84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d00d      	beq.n	8006a82 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f911 	bl	8007c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a72:	e006      	b.n	8006a82 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 f90a 	bl	8007c90 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a80:	e000      	b.n	8006a84 <USBD_CDC_Setup+0x12c>
          break;
 8006a82:	bf00      	nop
      }
      break;
 8006a84:	e006      	b.n	8006a94 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 f901 	bl	8007c90 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	75fb      	strb	r3, [r7, #23]
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ab0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006ab8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d03a      	beq.n	8006b3a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ac4:	78fa      	ldrb	r2, [r7, #3]
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	331c      	adds	r3, #28
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d029      	beq.n	8006b2e <USBD_CDC_DataIn+0x90>
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	331c      	adds	r3, #28
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	78f9      	ldrb	r1, [r7, #3]
 8006aee:	68b8      	ldr	r0, [r7, #8]
 8006af0:	460b      	mov	r3, r1
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4403      	add	r3, r0
 8006afa:	3320      	adds	r3, #32
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d110      	bne.n	8006b2e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	331c      	adds	r3, #28
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b20:	78f9      	ldrb	r1, [r7, #3]
 8006b22:	2300      	movs	r3, #0
 8006b24:	2200      	movs	r2, #0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fd70 	bl	800860c <USBD_LL_Transmit>
 8006b2c:	e003      	b.n	8006b36 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e000      	b.n	8006b3c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b3a:	2302      	movs	r3, #2
  }
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fd9b 	bl	8008698 <USBD_LL_GetRxDataSize>
 8006b62:	4602      	mov	r2, r0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4798      	blx	r3

    return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d014      	beq.n	8006bde <USBD_CDC_EP0_RxReady+0x44>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006bba:	2bff      	cmp	r3, #255	@ 0xff
 8006bbc:	d00f      	beq.n	8006bde <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bcc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	22ff      	movs	r2, #255	@ 0xff
 8006bda:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2243      	movs	r2, #67	@ 0x43
 8006bf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bf6:	4b03      	ldr	r3, [pc, #12]	@ (8006c04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000094 	.word	0x20000094

08006c08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2243      	movs	r2, #67	@ 0x43
 8006c14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c16:	4b03      	ldr	r3, [pc, #12]	@ (8006c24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20000050 	.word	0x20000050

08006c28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2243      	movs	r2, #67	@ 0x43
 8006c34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	@ (8006c44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	200000d8 	.word	0x200000d8

08006c48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	220a      	movs	r2, #10
 8006c54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	@ (8006c64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c

08006c68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c72:	2302      	movs	r3, #2
 8006c74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d017      	beq.n	8006d36 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7c1b      	ldrb	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d18:	2101      	movs	r1, #1
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fc99 	bl	8008652 <USBD_LL_PrepareReceive>
 8006d20:	e007      	b.n	8006d32 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d28:	2340      	movs	r3, #64	@ 0x40
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fc90 	bl	8008652 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d36:	2302      	movs	r3, #2
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	e01a      	b.n	8006d8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	79fa      	ldrb	r2, [r7, #7]
 8006d84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f001 fafe 	bl	8008388 <USBD_LL_Init>

  return USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d006      	beq.n	8006db8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
 8006db6:	e001      	b.n	8006dbc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006db8:	2302      	movs	r3, #2
 8006dba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 fb33 	bl	800843c <USBD_LL_Start>

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr

08006df4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e00:	2302      	movs	r3, #2
 8006e02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fed7 	bl	8007c1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d016      	beq.n	8006ec2 <USBD_LL_SetupStage+0x6a>
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d81c      	bhi.n	8006ed2 <USBD_LL_SetupStage+0x7a>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <USBD_LL_SetupStage+0x4a>
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d008      	beq.n	8006eb2 <USBD_LL_SetupStage+0x5a>
 8006ea0:	e017      	b.n	8006ed2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f9ca 	bl	8007244 <USBD_StdDevReq>
      break;
 8006eb0:	e01a      	b.n	8006ee8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa2c 	bl	8007318 <USBD_StdItfReq>
      break;
 8006ec0:	e012      	b.n	8006ee8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa6c 	bl	80073a8 <USBD_StdEPReq>
      break;
 8006ed0:	e00a      	b.n	8006ee8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006ed8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fb0b 	bl	80084fc <USBD_LL_StallEP>
      break;
 8006ee6:	bf00      	nop
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	460b      	mov	r3, r1
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d14b      	bne.n	8006f9e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d134      	bne.n	8006f82 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d919      	bls.n	8006f58 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d203      	bcs.n	8006f46 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	e002      	b.n	8006f4c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 ff53 	bl	8007dfc <USBD_CtlContinueRx>
 8006f56:	e038      	b.n	8006fca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d105      	bne.n	8006f7a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 ff50 	bl	8007e20 <USBD_CtlSendStatus>
 8006f80:	e023      	b.n	8006fca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f88:	2b05      	cmp	r3, #5
 8006f8a:	d11e      	bne.n	8006fca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f94:	2100      	movs	r1, #0
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f001 fab0 	bl	80084fc <USBD_LL_StallEP>
 8006f9c:	e015      	b.n	8006fca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d108      	bne.n	8006fc6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	7afa      	ldrb	r2, [r7, #11]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	4798      	blx	r3
 8006fc4:	e001      	b.n	8006fca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e000      	b.n	8006fcc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fe2:	7afb      	ldrb	r3, [r7, #11]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d17f      	bne.n	80070e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3314      	adds	r3, #20
 8006fec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d15c      	bne.n	80070b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d915      	bls.n	8007030 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	1ad2      	subs	r2, r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	b29b      	uxth	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 febd 	bl	8007d9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f001 fb12 	bl	8008652 <USBD_LL_PrepareReceive>
 800702e:	e04e      	b.n	80070ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	6912      	ldr	r2, [r2, #16]
 8007038:	fbb3 f1f2 	udiv	r1, r3, r2
 800703c:	fb01 f202 	mul.w	r2, r1, r2
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d11c      	bne.n	8007080 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800704e:	429a      	cmp	r2, r3
 8007050:	d316      	bcc.n	8007080 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800705c:	429a      	cmp	r2, r3
 800705e:	d20f      	bcs.n	8007080 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fe99 	bl	8007d9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007072:	2300      	movs	r3, #0
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 faea 	bl	8008652 <USBD_LL_PrepareReceive>
 800707e:	e026      	b.n	80070ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007092:	2b03      	cmp	r3, #3
 8007094:	d105      	bne.n	80070a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070a2:	2180      	movs	r1, #128	@ 0x80
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f001 fa29 	bl	80084fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fecb 	bl	8007e46 <USBD_CtlReceiveStatus>
 80070b0:	e00d      	b.n	80070ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d004      	beq.n	80070c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070c6:	2180      	movs	r1, #128	@ 0x80
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f001 fa17 	bl	80084fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11d      	bne.n	8007114 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7ff fe81 	bl	8006de0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80070e6:	e015      	b.n	8007114 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d108      	bne.n	8007110 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	7afa      	ldrb	r2, [r7, #11]
 8007108:	4611      	mov	r1, r2
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	4798      	blx	r3
 800710e:	e001      	b.n	8007114 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007110:	2302      	movs	r3, #2
 8007112:	e000      	b.n	8007116 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007126:	2340      	movs	r3, #64	@ 0x40
 8007128:	2200      	movs	r2, #0
 800712a:	2100      	movs	r1, #0
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f9a0 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2240      	movs	r2, #64	@ 0x40
 800713e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007142:	2340      	movs	r3, #64	@ 0x40
 8007144:	2200      	movs	r2, #0
 8007146:	2180      	movs	r1, #128	@ 0x80
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f992 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2240      	movs	r2, #64	@ 0x40
 8007158:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6852      	ldr	r2, [r2, #4]
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	4611      	mov	r1, r2
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
  }

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr

080071be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2204      	movs	r2, #4
 80071d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d105      	bne.n	8007204 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr

08007210 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800721e:	2b03      	cmp	r3, #3
 8007220:	d10b      	bne.n	800723a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800725a:	2b40      	cmp	r3, #64	@ 0x40
 800725c:	d005      	beq.n	800726a <USBD_StdDevReq+0x26>
 800725e:	2b40      	cmp	r3, #64	@ 0x40
 8007260:	d84f      	bhi.n	8007302 <USBD_StdDevReq+0xbe>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <USBD_StdDevReq+0x36>
 8007266:	2b20      	cmp	r3, #32
 8007268:	d14b      	bne.n	8007302 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      break;
 8007278:	e048      	b.n	800730c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	2b09      	cmp	r3, #9
 8007280:	d839      	bhi.n	80072f6 <USBD_StdDevReq+0xb2>
 8007282:	a201      	add	r2, pc, #4	@ (adr r2, 8007288 <USBD_StdDevReq+0x44>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072d9 	.word	0x080072d9
 800728c:	080072ed 	.word	0x080072ed
 8007290:	080072f7 	.word	0x080072f7
 8007294:	080072e3 	.word	0x080072e3
 8007298:	080072f7 	.word	0x080072f7
 800729c:	080072bb 	.word	0x080072bb
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	080072f7 	.word	0x080072f7
 80072a8:	080072cf 	.word	0x080072cf
 80072ac:	080072c5 	.word	0x080072c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9dc 	bl	8007670 <USBD_GetDescriptor>
          break;
 80072b8:	e022      	b.n	8007300 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb3f 	bl	8007940 <USBD_SetAddress>
          break;
 80072c2:	e01d      	b.n	8007300 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fb7e 	bl	80079c8 <USBD_SetConfig>
          break;
 80072cc:	e018      	b.n	8007300 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc07 	bl	8007ae4 <USBD_GetConfig>
          break;
 80072d6:	e013      	b.n	8007300 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc37 	bl	8007b4e <USBD_GetStatus>
          break;
 80072e0:	e00e      	b.n	8007300 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fc65 	bl	8007bb4 <USBD_SetFeature>
          break;
 80072ea:	e009      	b.n	8007300 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fc74 	bl	8007bdc <USBD_ClrFeature>
          break;
 80072f4:	e004      	b.n	8007300 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fcc9 	bl	8007c90 <USBD_CtlError>
          break;
 80072fe:	bf00      	nop
      }
      break;
 8007300:	e004      	b.n	800730c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fcc3 	bl	8007c90 <USBD_CtlError>
      break;
 800730a:	bf00      	nop
  }

  return ret;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop

08007318 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800732e:	2b40      	cmp	r3, #64	@ 0x40
 8007330:	d005      	beq.n	800733e <USBD_StdItfReq+0x26>
 8007332:	2b40      	cmp	r3, #64	@ 0x40
 8007334:	d82e      	bhi.n	8007394 <USBD_StdItfReq+0x7c>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <USBD_StdItfReq+0x26>
 800733a:	2b20      	cmp	r3, #32
 800733c:	d12a      	bne.n	8007394 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007344:	3b01      	subs	r3, #1
 8007346:	2b02      	cmp	r3, #2
 8007348:	d81d      	bhi.n	8007386 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	889b      	ldrh	r3, [r3, #4]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d813      	bhi.n	800737c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	4603      	mov	r3, r0
 8007364:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88db      	ldrh	r3, [r3, #6]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d110      	bne.n	8007390 <USBD_StdItfReq+0x78>
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fd53 	bl	8007e20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800737a:	e009      	b.n	8007390 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fc86 	bl	8007c90 <USBD_CtlError>
          break;
 8007384:	e004      	b.n	8007390 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc81 	bl	8007c90 <USBD_CtlError>
          break;
 800738e:	e000      	b.n	8007392 <USBD_StdItfReq+0x7a>
          break;
 8007390:	bf00      	nop
      }
      break;
 8007392:	e004      	b.n	800739e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fc7a 	bl	8007c90 <USBD_CtlError>
      break;
 800739c:	bf00      	nop
  }

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	889b      	ldrh	r3, [r3, #4]
 80073ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073c4:	2b40      	cmp	r3, #64	@ 0x40
 80073c6:	d007      	beq.n	80073d8 <USBD_StdEPReq+0x30>
 80073c8:	2b40      	cmp	r3, #64	@ 0x40
 80073ca:	f200 8146 	bhi.w	800765a <USBD_StdEPReq+0x2b2>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <USBD_StdEPReq+0x40>
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	f040 8141 	bne.w	800765a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
      break;
 80073e6:	e13d      	b.n	8007664 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d10a      	bne.n	800740a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
 8007402:	4603      	mov	r3, r0
 8007404:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	e12d      	b.n	8007666 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b03      	cmp	r3, #3
 8007410:	d007      	beq.n	8007422 <USBD_StdEPReq+0x7a>
 8007412:	2b03      	cmp	r3, #3
 8007414:	f300 811b 	bgt.w	800764e <USBD_StdEPReq+0x2a6>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d072      	beq.n	8007502 <USBD_StdEPReq+0x15a>
 800741c:	2b01      	cmp	r3, #1
 800741e:	d03a      	beq.n	8007496 <USBD_StdEPReq+0xee>
 8007420:	e115      	b.n	800764e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007428:	2b02      	cmp	r3, #2
 800742a:	d002      	beq.n	8007432 <USBD_StdEPReq+0x8a>
 800742c:	2b03      	cmp	r3, #3
 800742e:	d015      	beq.n	800745c <USBD_StdEPReq+0xb4>
 8007430:	e02b      	b.n	800748a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <USBD_StdEPReq+0xaa>
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b80      	cmp	r3, #128	@ 0x80
 800743c:	d009      	beq.n	8007452 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f85a 	bl	80084fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007448:	2180      	movs	r1, #128	@ 0x80
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 f856 	bl	80084fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007450:	e020      	b.n	8007494 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc1b 	bl	8007c90 <USBD_CtlError>
              break;
 800745a:	e01b      	b.n	8007494 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10e      	bne.n	8007482 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <USBD_StdEPReq+0xda>
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d008      	beq.n	8007482 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	88db      	ldrh	r3, [r3, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f83d 	bl	80084fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fccc 	bl	8007e20 <USBD_CtlSendStatus>

              break;
 8007488:	e004      	b.n	8007494 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fbff 	bl	8007c90 <USBD_CtlError>
              break;
 8007492:	bf00      	nop
          }
          break;
 8007494:	e0e0      	b.n	8007658 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749c:	2b02      	cmp	r3, #2
 800749e:	d002      	beq.n	80074a6 <USBD_StdEPReq+0xfe>
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d015      	beq.n	80074d0 <USBD_StdEPReq+0x128>
 80074a4:	e026      	b.n	80074f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <USBD_StdEPReq+0x11e>
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	2b80      	cmp	r3, #128	@ 0x80
 80074b0:	d009      	beq.n	80074c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 f820 	bl	80084fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074bc:	2180      	movs	r1, #128	@ 0x80
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 f81c 	bl	80084fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c4:	e01c      	b.n	8007500 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fbe1 	bl	8007c90 <USBD_CtlError>
              break;
 80074ce:	e017      	b.n	8007500 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	885b      	ldrh	r3, [r3, #2]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d112      	bne.n	80074fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 f827 	bl	800853a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fc97 	bl	8007e20 <USBD_CtlSendStatus>
              }
              break;
 80074f2:	e004      	b.n	80074fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fbca 	bl	8007c90 <USBD_CtlError>
              break;
 80074fc:	e000      	b.n	8007500 <USBD_StdEPReq+0x158>
              break;
 80074fe:	bf00      	nop
          }
          break;
 8007500:	e0aa      	b.n	8007658 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007508:	2b02      	cmp	r3, #2
 800750a:	d002      	beq.n	8007512 <USBD_StdEPReq+0x16a>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d032      	beq.n	8007576 <USBD_StdEPReq+0x1ce>
 8007510:	e097      	b.n	8007642 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d007      	beq.n	8007528 <USBD_StdEPReq+0x180>
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	2b80      	cmp	r3, #128	@ 0x80
 800751c:	d004      	beq.n	8007528 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fbb5 	bl	8007c90 <USBD_CtlError>
                break;
 8007526:	e091      	b.n	800764c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800752c:	2b00      	cmp	r3, #0
 800752e:	da0b      	bge.n	8007548 <USBD_StdEPReq+0x1a0>
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	3310      	adds	r3, #16
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	e00b      	b.n	8007560 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	3304      	adds	r3, #4
 8007560:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2202      	movs	r2, #2
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fbf8 	bl	8007d64 <USBD_CtlSendData>
              break;
 8007574:	e06a      	b.n	800764c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da11      	bge.n	80075a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	f003 020f 	and.w	r2, r3, #15
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	440b      	add	r3, r1
 8007590:	3318      	adds	r3, #24
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d117      	bne.n	80075c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fb78 	bl	8007c90 <USBD_CtlError>
                  break;
 80075a0:	e054      	b.n	800764c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	f003 020f 	and.w	r2, r3, #15
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fb65 	bl	8007c90 <USBD_CtlError>
                  break;
 80075c6:	e041      	b.n	800764c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da0b      	bge.n	80075e8 <USBD_StdEPReq+0x240>
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	3310      	adds	r3, #16
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	3304      	adds	r3, #4
 80075e6:	e00b      	b.n	8007600 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4413      	add	r3, r2
 80075fe:	3304      	adds	r3, #4
 8007600:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <USBD_StdEPReq+0x266>
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b80      	cmp	r3, #128	@ 0x80
 800760c:	d103      	bne.n	8007616 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e00e      	b.n	8007634 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 ffac 	bl	8008578 <USBD_LL_IsStallEP>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2201      	movs	r2, #1
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	e002      	b.n	8007634 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2202      	movs	r2, #2
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fb92 	bl	8007d64 <USBD_CtlSendData>
              break;
 8007640:	e004      	b.n	800764c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fb23 	bl	8007c90 <USBD_CtlError>
              break;
 800764a:	bf00      	nop
          }
          break;
 800764c:	e004      	b.n	8007658 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fb1d 	bl	8007c90 <USBD_CtlError>
          break;
 8007656:	bf00      	nop
      }
      break;
 8007658:	e004      	b.n	8007664 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fb17 	bl	8007c90 <USBD_CtlError>
      break;
 8007662:	bf00      	nop
  }

  return ret;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	885b      	ldrh	r3, [r3, #2]
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	2b06      	cmp	r3, #6
 8007692:	f200 8128 	bhi.w	80078e6 <USBD_GetDescriptor+0x276>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <USBD_GetDescriptor+0x2c>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076d1 	.word	0x080076d1
 80076a4:	08007711 	.word	0x08007711
 80076a8:	080078e7 	.word	0x080078e7
 80076ac:	080078e7 	.word	0x080078e7
 80076b0:	08007887 	.word	0x08007887
 80076b4:	080078b3 	.word	0x080078b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	7c12      	ldrb	r2, [r2, #16]
 80076c4:	f107 0108 	add.w	r1, r7, #8
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
 80076cc:	60f8      	str	r0, [r7, #12]
      break;
 80076ce:	e112      	b.n	80078f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7c1b      	ldrb	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10d      	bne.n	80076f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e0:	f107 0208 	add.w	r2, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	2202      	movs	r2, #2
 80076f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076f2:	e100      	b.n	80078f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	f107 0208 	add.w	r2, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	2202      	movs	r2, #2
 800770c:	701a      	strb	r2, [r3, #0]
      break;
 800770e:	e0f2      	b.n	80078f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	885b      	ldrh	r3, [r3, #2]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b05      	cmp	r3, #5
 8007718:	f200 80ac 	bhi.w	8007874 <USBD_GetDescriptor+0x204>
 800771c:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <USBD_GetDescriptor+0xb4>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	0800773d 	.word	0x0800773d
 8007728:	08007771 	.word	0x08007771
 800772c:	080077a5 	.word	0x080077a5
 8007730:	080077d9 	.word	0x080077d9
 8007734:	0800780d 	.word	0x0800780d
 8007738:	08007841 	.word	0x08007841
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7c12      	ldrb	r2, [r2, #16]
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775e:	e091      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa94 	bl	8007c90 <USBD_CtlError>
            err++;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	3301      	adds	r3, #1
 800776c:	72fb      	strb	r3, [r7, #11]
          break;
 800776e:	e089      	b.n	8007884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007792:	e077      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa7a 	bl	8007c90 <USBD_CtlError>
            err++;
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	3301      	adds	r3, #1
 80077a0:	72fb      	strb	r3, [r7, #11]
          break;
 80077a2:	e06f      	b.n	8007884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c6:	e05d      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa60 	bl	8007c90 <USBD_CtlError>
            err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
          break;
 80077d6:	e055      	b.n	8007884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e043      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa46 	bl	8007c90 <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e03b      	b.n	8007884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e029      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa2c 	bl	8007c90 <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e021      	b.n	8007884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e00f      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa12 	bl	8007c90 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e007      	b.n	8007884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa0a 	bl	8007c90 <USBD_CtlError>
          err++;
 800787c:	7afb      	ldrb	r3, [r7, #11]
 800787e:	3301      	adds	r3, #1
 8007880:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007882:	e038      	b.n	80078f6 <USBD_GetDescriptor+0x286>
 8007884:	e037      	b.n	80078f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7c1b      	ldrb	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	f107 0208 	add.w	r2, r7, #8
 800789a:	4610      	mov	r0, r2
 800789c:	4798      	blx	r3
 800789e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078a0:	e029      	b.n	80078f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f9f3 	bl	8007c90 <USBD_CtlError>
        err++;
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	3301      	adds	r3, #1
 80078ae:	72fb      	strb	r3, [r7, #11]
      break;
 80078b0:	e021      	b.n	80078f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	7c1b      	ldrb	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	4610      	mov	r0, r2
 80078c8:	4798      	blx	r3
 80078ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3301      	adds	r3, #1
 80078d0:	2207      	movs	r2, #7
 80078d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d4:	e00f      	b.n	80078f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9d9 	bl	8007c90 <USBD_CtlError>
        err++;
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	3301      	adds	r3, #1
 80078e2:	72fb      	strb	r3, [r7, #11]
      break;
 80078e4:	e007      	b.n	80078f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f9d1 	bl	8007c90 <USBD_CtlError>
      err++;
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	3301      	adds	r3, #1
 80078f2:	72fb      	strb	r3, [r7, #11]
      break;
 80078f4:	bf00      	nop
  }

  if (err != 0U)
 80078f6:	7afb      	ldrb	r3, [r7, #11]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d11c      	bne.n	8007936 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80078fc:	893b      	ldrh	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d011      	beq.n	8007926 <USBD_GetDescriptor+0x2b6>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00d      	beq.n	8007926 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	88da      	ldrh	r2, [r3, #6]
 800790e:	893b      	ldrh	r3, [r7, #8]
 8007910:	4293      	cmp	r3, r2
 8007912:	bf28      	it	cs
 8007914:	4613      	movcs	r3, r2
 8007916:	b29b      	uxth	r3, r3
 8007918:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800791a:	893b      	ldrh	r3, [r7, #8]
 800791c:	461a      	mov	r2, r3
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa1f 	bl	8007d64 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa76 	bl	8007e20 <USBD_CtlSendStatus>
 8007934:	e000      	b.n	8007938 <USBD_GetDescriptor+0x2c8>
    return;
 8007936:	bf00      	nop
    }
  }
}
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop

08007940 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d130      	bne.n	80079b4 <USBD_SetAddress+0x74>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d12c      	bne.n	80079b4 <USBD_SetAddress+0x74>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007960:	d828      	bhi.n	80079b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007974:	2b03      	cmp	r3, #3
 8007976:	d104      	bne.n	8007982 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f988 	bl	8007c90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	e01d      	b.n	80079be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7bfa      	ldrb	r2, [r7, #15]
 8007986:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fe1d 	bl	80085ce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fa43 	bl	8007e20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a8:	e009      	b.n	80079be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b2:	e004      	b.n	80079be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f96a 	bl	8007c90 <USBD_CtlError>
  }
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	4b41      	ldr	r3, [pc, #260]	@ (8007ae0 <USBD_SetConfig+0x118>)
 80079da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079dc:	4b40      	ldr	r3, [pc, #256]	@ (8007ae0 <USBD_SetConfig+0x118>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d904      	bls.n	80079ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f952 	bl	8007c90 <USBD_CtlError>
 80079ec:	e075      	b.n	8007ada <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d002      	beq.n	80079fe <USBD_SetConfig+0x36>
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d023      	beq.n	8007a44 <USBD_SetConfig+0x7c>
 80079fc:	e062      	b.n	8007ac4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80079fe:	4b38      	ldr	r3, [pc, #224]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01a      	beq.n	8007a3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a06:	4b36      	ldr	r3, [pc, #216]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2203      	movs	r2, #3
 8007a14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a18:	4b31      	ldr	r3, [pc, #196]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff f9e8 	bl	8006df4 <USBD_SetClassConfig>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d104      	bne.n	8007a34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f92f 	bl	8007c90 <USBD_CtlError>
            return;
 8007a32:	e052      	b.n	8007ada <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9f3 	bl	8007e20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a3a:	e04e      	b.n	8007ada <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9ef 	bl	8007e20 <USBD_CtlSendStatus>
        break;
 8007a42:	e04a      	b.n	8007ada <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a44:	4b26      	ldr	r3, [pc, #152]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d112      	bne.n	8007a72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007a54:	4b22      	ldr	r3, [pc, #136]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a5e:	4b20      	ldr	r3, [pc, #128]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff f9e4 	bl	8006e32 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9d8 	bl	8007e20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a70:	e033      	b.n	8007ada <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007a72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d01d      	beq.n	8007abc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff f9d2 	bl	8006e32 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a8e:	4b14      	ldr	r3, [pc, #80]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a98:	4b11      	ldr	r3, [pc, #68]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f9a8 	bl	8006df4 <USBD_SetClassConfig>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d104      	bne.n	8007ab4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8ef 	bl	8007c90 <USBD_CtlError>
            return;
 8007ab2:	e012      	b.n	8007ada <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9b3 	bl	8007e20 <USBD_CtlSendStatus>
        break;
 8007aba:	e00e      	b.n	8007ada <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9af 	bl	8007e20 <USBD_CtlSendStatus>
        break;
 8007ac2:	e00a      	b.n	8007ada <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8e2 	bl	8007c90 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007acc:	4b04      	ldr	r3, [pc, #16]	@ (8007ae0 <USBD_SetConfig+0x118>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff f9ad 	bl	8006e32 <USBD_ClrClassConfig>
        break;
 8007ad8:	bf00      	nop
    }
  }
}
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000218 	.word	0x20000218

08007ae4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d004      	beq.n	8007b00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f8c9 	bl	8007c90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007afe:	e022      	b.n	8007b46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	dc02      	bgt.n	8007b10 <USBD_GetConfig+0x2c>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dc03      	bgt.n	8007b16 <USBD_GetConfig+0x32>
 8007b0e:	e015      	b.n	8007b3c <USBD_GetConfig+0x58>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d00b      	beq.n	8007b2c <USBD_GetConfig+0x48>
 8007b14:	e012      	b.n	8007b3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	2201      	movs	r2, #1
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f91d 	bl	8007d64 <USBD_CtlSendData>
        break;
 8007b2a:	e00c      	b.n	8007b46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	2201      	movs	r2, #1
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f915 	bl	8007d64 <USBD_CtlSendData>
        break;
 8007b3a:	e004      	b.n	8007b46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8a6 	bl	8007c90 <USBD_CtlError>
        break;
 8007b44:	bf00      	nop
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d81e      	bhi.n	8007ba2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	88db      	ldrh	r3, [r3, #6]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d004      	beq.n	8007b76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f88e 	bl	8007c90 <USBD_CtlError>
        break;
 8007b74:	e01a      	b.n	8007bac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f043 0202 	orr.w	r2, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	330c      	adds	r3, #12
 8007b96:	2202      	movs	r2, #2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f8e2 	bl	8007d64 <USBD_CtlSendData>
      break;
 8007ba0:	e004      	b.n	8007bac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f873 	bl	8007c90 <USBD_CtlError>
      break;
 8007baa:	bf00      	nop
  }
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d106      	bne.n	8007bd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f926 	bl	8007e20 <USBD_CtlSendStatus>
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bec:	3b01      	subs	r3, #1
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d80b      	bhi.n	8007c0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d10c      	bne.n	8007c14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f90c 	bl	8007e20 <USBD_CtlSendStatus>
      }
      break;
 8007c08:	e004      	b.n	8007c14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f83f 	bl	8007c90 <USBD_CtlError>
      break;
 8007c12:	e000      	b.n	8007c16 <USBD_ClrFeature+0x3a>
      break;
 8007c14:	bf00      	nop
  }
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	785a      	ldrb	r2, [r3, #1]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	3302      	adds	r3, #2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	3303      	adds	r3, #3
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3304      	adds	r3, #4
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	3305      	adds	r3, #5
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4413      	add	r3, r2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	3306      	adds	r3, #6
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	3307      	adds	r3, #7
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	80da      	strh	r2, [r3, #6]

}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c9a:	2180      	movs	r1, #128	@ 0x80
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc2d 	bl	80084fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc29 	bl	80084fc <USBD_LL_StallEP>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d032      	beq.n	8007d2e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 f834 	bl	8007d36 <USBD_GetLen>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	75fa      	strb	r2, [r7, #23]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	75fa      	strb	r2, [r7, #23]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007cfe:	e012      	b.n	8007d26 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	60fa      	str	r2, [r7, #12]
 8007d06:	7dfa      	ldrb	r2, [r7, #23]
 8007d08:	1c51      	adds	r1, r2, #1
 8007d0a:	75f9      	strb	r1, [r7, #23]
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	440a      	add	r2, r1
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	75fa      	strb	r2, [r7, #23]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4413      	add	r3, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e8      	bne.n	8007d00 <USBD_GetString+0x4e>
    }
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007d42:	e005      	b.n	8007d50 <USBD_GetLen+0x1a>
  {
    len++;
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	3301      	adds	r3, #1
 8007d48:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f5      	bne.n	8007d44 <USBD_GetLen+0xe>
  }

  return len;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2202      	movs	r2, #2
 8007d76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d86:	88fb      	ldrh	r3, [r7, #6]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fc3d 	bl	800860c <USBD_LL_Transmit>

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007daa:	88fb      	ldrh	r3, [r7, #6]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	2100      	movs	r1, #0
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fc2b 	bl	800860c <USBD_LL_Transmit>

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007dd6:	88fa      	ldrh	r2, [r7, #6]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fc30 	bl	8008652 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fc1e 	bl	8008652 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e30:	2300      	movs	r3, #0
 8007e32:	2200      	movs	r2, #0
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fbe8 	bl	800860c <USBD_LL_Transmit>

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2205      	movs	r2, #5
 8007e52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e56:	2300      	movs	r3, #0
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fbf8 	bl	8008652 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e70:	2200      	movs	r2, #0
 8007e72:	4912      	ldr	r1, [pc, #72]	@ (8007ebc <MX_USB_DEVICE_Init+0x50>)
 8007e74:	4812      	ldr	r0, [pc, #72]	@ (8007ec0 <MX_USB_DEVICE_Init+0x54>)
 8007e76:	f7fe ff63 	bl	8006d40 <USBD_Init>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e80:	f7f8 fb4a 	bl	8000518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e84:	490f      	ldr	r1, [pc, #60]	@ (8007ec4 <MX_USB_DEVICE_Init+0x58>)
 8007e86:	480e      	ldr	r0, [pc, #56]	@ (8007ec0 <MX_USB_DEVICE_Init+0x54>)
 8007e88:	f7fe ff85 	bl	8006d96 <USBD_RegisterClass>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e92:	f7f8 fb41 	bl	8000518 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e96:	490c      	ldr	r1, [pc, #48]	@ (8007ec8 <MX_USB_DEVICE_Init+0x5c>)
 8007e98:	4809      	ldr	r0, [pc, #36]	@ (8007ec0 <MX_USB_DEVICE_Init+0x54>)
 8007e9a:	f7fe fee5 	bl	8006c68 <USBD_CDC_RegisterInterface>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ea4:	f7f8 fb38 	bl	8000518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ea8:	4805      	ldr	r0, [pc, #20]	@ (8007ec0 <MX_USB_DEVICE_Init+0x54>)
 8007eaa:	f7fe ff8d 	bl	8006dc8 <USBD_Start>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007eb4:	f7f8 fb30 	bl	8000518 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007eb8:	bf00      	nop
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	2000012c 	.word	0x2000012c
 8007ec0:	2000021c 	.word	0x2000021c
 8007ec4:	20000018 	.word	0x20000018
 8007ec8:	2000011c 	.word	0x2000011c

08007ecc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4905      	ldr	r1, [pc, #20]	@ (8007ee8 <CDC_Init_FS+0x1c>)
 8007ed4:	4805      	ldr	r0, [pc, #20]	@ (8007eec <CDC_Init_FS+0x20>)
 8007ed6:	f7fe fedd 	bl	8006c94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007eda:	4905      	ldr	r1, [pc, #20]	@ (8007ef0 <CDC_Init_FS+0x24>)
 8007edc:	4803      	ldr	r0, [pc, #12]	@ (8007eec <CDC_Init_FS+0x20>)
 8007ede:	f7fe fef2 	bl	8006cc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ee2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200008e0 	.word	0x200008e0
 8007eec:	2000021c 	.word	0x2000021c
 8007ef0:	200004e0 	.word	0x200004e0

08007ef4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ef8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr
	...

08007f04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b23      	cmp	r3, #35	@ 0x23
 8007f18:	d84a      	bhi.n	8007fb0 <CDC_Control_FS+0xac>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <CDC_Control_FS+0x1c>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007fb1 	.word	0x08007fb1
 8007f24:	08007fb1 	.word	0x08007fb1
 8007f28:	08007fb1 	.word	0x08007fb1
 8007f2c:	08007fb1 	.word	0x08007fb1
 8007f30:	08007fb1 	.word	0x08007fb1
 8007f34:	08007fb1 	.word	0x08007fb1
 8007f38:	08007fb1 	.word	0x08007fb1
 8007f3c:	08007fb1 	.word	0x08007fb1
 8007f40:	08007fb1 	.word	0x08007fb1
 8007f44:	08007fb1 	.word	0x08007fb1
 8007f48:	08007fb1 	.word	0x08007fb1
 8007f4c:	08007fb1 	.word	0x08007fb1
 8007f50:	08007fb1 	.word	0x08007fb1
 8007f54:	08007fb1 	.word	0x08007fb1
 8007f58:	08007fb1 	.word	0x08007fb1
 8007f5c:	08007fb1 	.word	0x08007fb1
 8007f60:	08007fb1 	.word	0x08007fb1
 8007f64:	08007fb1 	.word	0x08007fb1
 8007f68:	08007fb1 	.word	0x08007fb1
 8007f6c:	08007fb1 	.word	0x08007fb1
 8007f70:	08007fb1 	.word	0x08007fb1
 8007f74:	08007fb1 	.word	0x08007fb1
 8007f78:	08007fb1 	.word	0x08007fb1
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	08007fb1 	.word	0x08007fb1
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fb1 	.word	0x08007fb1
 8007fa8:	08007fb1 	.word	0x08007fb1
 8007fac:	08007fb1 	.word	0x08007fb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fb0:	bf00      	nop
  }

  return (USBD_OK);
 8007fb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop

08007fc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	4805      	ldr	r0, [pc, #20]	@ (8007fe4 <CDC_Receive_FS+0x24>)
 8007fce:	f7fe fe7a 	bl	8006cc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fd2:	4804      	ldr	r0, [pc, #16]	@ (8007fe4 <CDC_Receive_FS+0x24>)
 8007fd4:	f7fe fe8a 	bl	8006cec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	2000021c 	.word	0x2000021c

08007fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2212      	movs	r2, #18
 8007ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ffa:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20000148 	.word	0x20000148

0800800c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2204      	movs	r2, #4
 800801c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800801e:	4b03      	ldr	r3, [pc, #12]	@ (800802c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	2000015c 	.word	0x2000015c

08008030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4907      	ldr	r1, [pc, #28]	@ (8008064 <USBD_FS_ProductStrDescriptor+0x34>)
 8008046:	4808      	ldr	r0, [pc, #32]	@ (8008068 <USBD_FS_ProductStrDescriptor+0x38>)
 8008048:	f7ff fe33 	bl	8007cb2 <USBD_GetString>
 800804c:	e004      	b.n	8008058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	4904      	ldr	r1, [pc, #16]	@ (8008064 <USBD_FS_ProductStrDescriptor+0x34>)
 8008052:	4805      	ldr	r0, [pc, #20]	@ (8008068 <USBD_FS_ProductStrDescriptor+0x38>)
 8008054:	f7ff fe2d 	bl	8007cb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008058:	4b02      	ldr	r3, [pc, #8]	@ (8008064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000ce0 	.word	0x20000ce0
 8008068:	080087c8 	.word	0x080087c8

0800806c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	4904      	ldr	r1, [pc, #16]	@ (800808c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800807c:	4804      	ldr	r0, [pc, #16]	@ (8008090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800807e:	f7ff fe18 	bl	8007cb2 <USBD_GetString>
  return USBD_StrDesc;
 8008082:	4b02      	ldr	r3, [pc, #8]	@ (800808c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000ce0 	.word	0x20000ce0
 8008090:	080087e0 	.word	0x080087e0

08008094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	6039      	str	r1, [r7, #0]
 800809e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	221a      	movs	r2, #26
 80080a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080a6:	f000 f843 	bl	8008130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080aa:	4b02      	ldr	r3, [pc, #8]	@ (80080b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000160 	.word	0x20000160

080080b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4907      	ldr	r1, [pc, #28]	@ (80080ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ce:	4808      	ldr	r0, [pc, #32]	@ (80080f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080d0:	f7ff fdef 	bl	8007cb2 <USBD_GetString>
 80080d4:	e004      	b.n	80080e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4904      	ldr	r1, [pc, #16]	@ (80080ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80080da:	4805      	ldr	r0, [pc, #20]	@ (80080f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080dc:	f7ff fde9 	bl	8007cb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080e0:	4b02      	ldr	r3, [pc, #8]	@ (80080ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20000ce0 	.word	0x20000ce0
 80080f0:	080087f4 	.word	0x080087f4

080080f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4907      	ldr	r1, [pc, #28]	@ (8008128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800810a:	4808      	ldr	r0, [pc, #32]	@ (800812c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800810c:	f7ff fdd1 	bl	8007cb2 <USBD_GetString>
 8008110:	e004      	b.n	800811c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4904      	ldr	r1, [pc, #16]	@ (8008128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008116:	4805      	ldr	r0, [pc, #20]	@ (800812c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008118:	f7ff fdcb 	bl	8007cb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800811c:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000ce0 	.word	0x20000ce0
 800812c:	08008800 	.word	0x08008800

08008130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008136:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <Get_SerialNum+0x44>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800813c:	4b0e      	ldr	r3, [pc, #56]	@ (8008178 <Get_SerialNum+0x48>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008142:	4b0e      	ldr	r3, [pc, #56]	@ (800817c <Get_SerialNum+0x4c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008156:	2208      	movs	r2, #8
 8008158:	4909      	ldr	r1, [pc, #36]	@ (8008180 <Get_SerialNum+0x50>)
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f814 	bl	8008188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008160:	2204      	movs	r2, #4
 8008162:	4908      	ldr	r1, [pc, #32]	@ (8008184 <Get_SerialNum+0x54>)
 8008164:	68b8      	ldr	r0, [r7, #8]
 8008166:	f000 f80f 	bl	8008188 <IntToUnicode>
  }
}
 800816a:	bf00      	nop
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	1ffff7e8 	.word	0x1ffff7e8
 8008178:	1ffff7ec 	.word	0x1ffff7ec
 800817c:	1ffff7f0 	.word	0x1ffff7f0
 8008180:	20000162 	.word	0x20000162
 8008184:	20000172 	.word	0x20000172

08008188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
 800819e:	e027      	b.n	80081f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	0f1b      	lsrs	r3, r3, #28
 80081a4:	2b09      	cmp	r3, #9
 80081a6:	d80b      	bhi.n	80081c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	0f1b      	lsrs	r3, r3, #28
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	4619      	mov	r1, r3
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	440b      	add	r3, r1
 80081b8:	3230      	adds	r2, #48	@ 0x30
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e00a      	b.n	80081d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	0f1b      	lsrs	r3, r3, #28
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	4619      	mov	r1, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	440b      	add	r3, r1
 80081d0:	3237      	adds	r2, #55	@ 0x37
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	3301      	adds	r3, #1
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	3301      	adds	r3, #1
 80081ee:	75fb      	strb	r3, [r7, #23]
 80081f0:	7dfa      	ldrb	r2, [r7, #23]
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d3d3      	bcc.n	80081a0 <IntToUnicode+0x18>
  }
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0d      	ldr	r2, [pc, #52]	@ (8008248 <HAL_PCD_MspInit+0x44>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d113      	bne.n	800823e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008216:	4b0d      	ldr	r3, [pc, #52]	@ (800824c <HAL_PCD_MspInit+0x48>)
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	4a0c      	ldr	r2, [pc, #48]	@ (800824c <HAL_PCD_MspInit+0x48>)
 800821c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008220:	61d3      	str	r3, [r2, #28]
 8008222:	4b0a      	ldr	r3, [pc, #40]	@ (800824c <HAL_PCD_MspInit+0x48>)
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	2014      	movs	r0, #20
 8008234:	f7f8 ffeb 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008238:	2014      	movs	r0, #20
 800823a:	f7f9 f804 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	40005c00 	.word	0x40005c00
 800824c:	40021000 	.word	0x40021000

08008250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f7fe fdf6 	bl	8006e58 <USBD_LL_SetupStage>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	440b      	add	r3, r1
 8008294:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	4619      	mov	r1, r3
 800829e:	f7fe fe28 	bl	8006ef2 <USBD_LL_DataOutStage>
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	440b      	add	r3, r1
 80082ca:	3324      	adds	r3, #36	@ 0x24
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	4619      	mov	r1, r3
 80082d2:	f7fe fe7f 	bl	8006fd4 <USBD_LL_DataInStage>
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe ff8f 	bl	8007210 <USBD_LL_SOF>
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	799b      	ldrb	r3, [r3, #6]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d001      	beq.n	8008312 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800830e:	f7f8 f903 	bl	8000518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe ff3f 	bl	80071a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fef8 	bl	800711e <USBD_LL_Reset>
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe ff39 	bl	80071be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7a9b      	ldrb	r3, [r3, #10]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008354:	4b04      	ldr	r3, [pc, #16]	@ (8008368 <HAL_PCD_SuspendCallback+0x30>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	4a03      	ldr	r2, [pc, #12]	@ (8008368 <HAL_PCD_SuspendCallback+0x30>)
 800835a:	f043 0306 	orr.w	r3, r3, #6
 800835e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed00 	.word	0xe000ed00

0800836c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe ff33 	bl	80071e6 <USBD_LL_Resume>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008390:	4a28      	ldr	r2, [pc, #160]	@ (8008434 <USBD_LL_Init+0xac>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a26      	ldr	r2, [pc, #152]	@ (8008434 <USBD_LL_Init+0xac>)
 800839c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083a0:	4b24      	ldr	r3, [pc, #144]	@ (8008434 <USBD_LL_Init+0xac>)
 80083a2:	4a25      	ldr	r2, [pc, #148]	@ (8008438 <USBD_LL_Init+0xb0>)
 80083a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083a6:	4b23      	ldr	r3, [pc, #140]	@ (8008434 <USBD_LL_Init+0xac>)
 80083a8:	2208      	movs	r2, #8
 80083aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083ac:	4b21      	ldr	r3, [pc, #132]	@ (8008434 <USBD_LL_Init+0xac>)
 80083ae:	2202      	movs	r2, #2
 80083b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083b2:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <USBD_LL_Init+0xac>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <USBD_LL_Init+0xac>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083be:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <USBD_LL_Init+0xac>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083c4:	481b      	ldr	r0, [pc, #108]	@ (8008434 <USBD_LL_Init+0xac>)
 80083c6:	f7f9 f8f5 	bl	80015b4 <HAL_PCD_Init>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083d0:	f7f8 f8a2 	bl	8000518 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083da:	2318      	movs	r3, #24
 80083dc:	2200      	movs	r2, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	f7fa fe06 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083ea:	2358      	movs	r3, #88	@ 0x58
 80083ec:	2200      	movs	r2, #0
 80083ee:	2180      	movs	r1, #128	@ 0x80
 80083f0:	f7fa fdfe 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083fa:	23c0      	movs	r3, #192	@ 0xc0
 80083fc:	2200      	movs	r2, #0
 80083fe:	2181      	movs	r1, #129	@ 0x81
 8008400:	f7fa fdf6 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800840a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800840e:	2200      	movs	r2, #0
 8008410:	2101      	movs	r1, #1
 8008412:	f7fa fded 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800841c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008420:	2200      	movs	r2, #0
 8008422:	2182      	movs	r1, #130	@ 0x82
 8008424:	f7fa fde4 	bl	8002ff0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000ee0 	.word	0x20000ee0
 8008438:	40005c00 	.word	0x40005c00

0800843c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008452:	4618      	mov	r0, r3
 8008454:	f7f9 f9a4 	bl	80017a0 <HAL_PCD_Start>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f94e 	bl	8008700 <USBD_Get_USB_Status>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008468:	7bbb      	ldrb	r3, [r7, #14]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	461a      	mov	r2, r3
 8008480:	4603      	mov	r3, r0
 8008482:	70fb      	strb	r3, [r7, #3]
 8008484:	460b      	mov	r3, r1
 8008486:	70bb      	strb	r3, [r7, #2]
 8008488:	4613      	mov	r3, r2
 800848a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800849a:	78bb      	ldrb	r3, [r7, #2]
 800849c:	883a      	ldrh	r2, [r7, #0]
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	f7f9 faf8 	bl	8001a94 <HAL_PCD_EP_Open>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f928 	bl	8008700 <USBD_Get_USB_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f9 fb36 	bl	8001b4e <HAL_PCD_EP_Close>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f909 	bl	8008700 <USBD_Get_USB_Status>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008516:	78fa      	ldrb	r2, [r7, #3]
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7f9 fbde 	bl	8001cdc <HAL_PCD_EP_SetStall>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f8ea 	bl	8008700 <USBD_Get_USB_Status>
 800852c:	4603      	mov	r3, r0
 800852e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008530:	7bbb      	ldrb	r3, [r7, #14]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7f9 fc1f 	bl	8001d9c <HAL_PCD_EP_ClrStall>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f8cb 	bl	8008700 <USBD_Get_USB_Status>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800856e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800858a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800858c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	da0b      	bge.n	80085ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	440b      	add	r3, r1
 80085a6:	3312      	adds	r3, #18
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	e00b      	b.n	80085c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	440b      	add	r3, r1
 80085be:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80085c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	4611      	mov	r1, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f9 fa2d 	bl	8001a4c <HAL_PCD_SetAddress>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f881 	bl	8008700 <USBD_Get_USB_Status>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008602:	7bbb      	ldrb	r3, [r7, #14]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	461a      	mov	r2, r3
 8008618:	460b      	mov	r3, r1
 800861a:	72fb      	strb	r3, [r7, #11]
 800861c:	4613      	mov	r3, r2
 800861e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	7af9      	ldrb	r1, [r7, #11]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	f7f9 fb1b 	bl	8001c6e <HAL_PCD_EP_Transmit>
 8008638:	4603      	mov	r3, r0
 800863a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f85e 	bl	8008700 <USBD_Get_USB_Status>
 8008644:	4603      	mov	r3, r0
 8008646:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008648:	7dbb      	ldrb	r3, [r7, #22]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	461a      	mov	r2, r3
 800865e:	460b      	mov	r3, r1
 8008660:	72fb      	strb	r3, [r7, #11]
 8008662:	4613      	mov	r3, r2
 8008664:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008674:	893b      	ldrh	r3, [r7, #8]
 8008676:	7af9      	ldrb	r1, [r7, #11]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	f7f9 fab0 	bl	8001bde <HAL_PCD_EP_Receive>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f83b 	bl	8008700 <USBD_Get_USB_Status>
 800868a:	4603      	mov	r3, r0
 800868c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800868e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f9 fac6 	bl	8001c40 <HAL_PCD_EP_GetRxCount>
 80086b4:	4603      	mov	r3, r0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086c8:	4b02      	ldr	r3, [pc, #8]	@ (80086d4 <USBD_static_malloc+0x14>)
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	200011b8 	.word	0x200011b8

080086d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]

}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr

080086ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d817      	bhi.n	8008744 <USBD_Get_USB_Status+0x44>
 8008714:	a201      	add	r2, pc, #4	@ (adr r2, 800871c <USBD_Get_USB_Status+0x1c>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	0800872d 	.word	0x0800872d
 8008720:	08008733 	.word	0x08008733
 8008724:	08008739 	.word	0x08008739
 8008728:	0800873f 	.word	0x0800873f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
    break;
 8008730:	e00b      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008732:	2302      	movs	r3, #2
 8008734:	73fb      	strb	r3, [r7, #15]
    break;
 8008736:	e008      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e005      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800873e:	2302      	movs	r3, #2
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e002      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008744:	2302      	movs	r3, #2
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	bf00      	nop
  }
  return usb_status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop

08008758 <memset>:
 8008758:	4603      	mov	r3, r0
 800875a:	4402      	add	r2, r0
 800875c:	4293      	cmp	r3, r2
 800875e:	d100      	bne.n	8008762 <memset+0xa>
 8008760:	4770      	bx	lr
 8008762:	f803 1b01 	strb.w	r1, [r3], #1
 8008766:	e7f9      	b.n	800875c <memset+0x4>

08008768 <__libc_init_array>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	2600      	movs	r6, #0
 800876c:	4d0c      	ldr	r5, [pc, #48]	@ (80087a0 <__libc_init_array+0x38>)
 800876e:	4c0d      	ldr	r4, [pc, #52]	@ (80087a4 <__libc_init_array+0x3c>)
 8008770:	1b64      	subs	r4, r4, r5
 8008772:	10a4      	asrs	r4, r4, #2
 8008774:	42a6      	cmp	r6, r4
 8008776:	d109      	bne.n	800878c <__libc_init_array+0x24>
 8008778:	f000 f81a 	bl	80087b0 <_init>
 800877c:	2600      	movs	r6, #0
 800877e:	4d0a      	ldr	r5, [pc, #40]	@ (80087a8 <__libc_init_array+0x40>)
 8008780:	4c0a      	ldr	r4, [pc, #40]	@ (80087ac <__libc_init_array+0x44>)
 8008782:	1b64      	subs	r4, r4, r5
 8008784:	10a4      	asrs	r4, r4, #2
 8008786:	42a6      	cmp	r6, r4
 8008788:	d105      	bne.n	8008796 <__libc_init_array+0x2e>
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008790:	4798      	blx	r3
 8008792:	3601      	adds	r6, #1
 8008794:	e7ee      	b.n	8008774 <__libc_init_array+0xc>
 8008796:	f855 3b04 	ldr.w	r3, [r5], #4
 800879a:	4798      	blx	r3
 800879c:	3601      	adds	r6, #1
 800879e:	e7f2      	b.n	8008786 <__libc_init_array+0x1e>
 80087a0:	08008850 	.word	0x08008850
 80087a4:	08008850 	.word	0x08008850
 80087a8:	08008850 	.word	0x08008850
 80087ac:	08008854 	.word	0x08008854

080087b0 <_init>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr

080087bc <_fini>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr
